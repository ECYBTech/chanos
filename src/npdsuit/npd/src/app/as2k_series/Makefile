# Network Platform Daemon 
#

APP_TARGET_NAME = npd

CC  = $(COMPILER_PREFIX)gcc

CFLAGS = -g -fPIC -Wall -D_GNU_SOURCE -D__USE_UNIX98 -D__USE_GNU $(INCLUDE_AUTEWARE_MODULES)#-ansi
INCLUDES += -I$(USER_ADDITION_LIB_ROOT_PATH)/include
INCLUDES += -I$(ACCAPI_DIR) -I$(ACCAPI_DIR)/npd -I$(ACCAPI_DIR)/lib -I$(ACCAPI_DIR)/nam

#ASIC driver type MARVELL
ifeq ($(DRV_LIB_FLAG),CPSS_XCAT)
INCLUDES += -I$(SDK_TOPDIR)/mainPpDrv/h
INCLUDES += -I$(SDK_TOPDIR)/common/h
INCLUDES += -I$(SDK_TOPDIR)/cpssEnabler/mainOs/h
CFLAGS += -DINCLUDE_L3 -DDRV_LIB_CPSS -DDRV_LIB_CPSS_XCAT
endif

#ASIC driver type BCM
ifeq ($(DRV_LIB_FLAG),BCM)
INCLUDES += -I$(SDK_TOPDIR)/include
CFLAGS += -DINCLUDE_L3 -DBCM_ESW_SUPPORT -DDRV_LIB_BCM
endif

#NPD_CHASM_SPEC_OBJS = nh_product_common_init.o nh_product_common_info.o nh_product_info.o as_product_info.o
INCLUDES += -I$(USER_ADDITION_LIB_ROOT_PATH)/include
ifeq ($(PRODUCT_SERIES), NH_SERIES)
NPD_CHASM_SPEC_OBJS += 
endif

ifeq ($(PRODUCT_SERIES), AS_SERIES)
NPD_CHASM_SPEC_OBJS += 
endif

ifeq ($(PRODUCT_SERIES), as3000)
NPD_CHASM_SPEC_OBJS += as2k_product_init.o as2k_product_info.o
endif

ifeq ($(DRV_LIB_FLAG),BCM)
#NPD_CHASM_SPEC_OBJS += nh_bcm_spec_init.o 
endif

ifeq ($(DRV_LIB_FLAG),CENTEC)
NPD_CHASM_SPEC_OBJS += nh_cen_spec_init.o 
endif

ifeq ($(DRV_LIB_FLAG),CPSS_XCAT)
NPD_CHASM_SPEC_OBJS += as_mvl_spec_init.o 
endif

NPD_CHASM_SPEC_DEPFILES = nh.dep

DC_LIST := $(patsubst %.o,%.dc,$(NPD_CHASM_SPEC_OBJS))

BUILD_CHASM_OBJS += $(foreach module,$(NPD_CHASM_SPEC_OBJS), $(PROJECT_BUILD_DIR)/$(APP_TARGET_NAME)/$(module))

LDFLAGS = -shared -Wl,-soname,$(NPD_CHASM_INIT_SHLIB_SONAME)

NPD_CHASM_INIT_SHLIB_MAJOR = 0
NPD_CHASM_INIT_SHLIB_MINOR = 1

NPD_CHASM_INIT_SHLIB_LINKERNAME = libpdt_init.so
NPD_CHASM_INIT_SHLIB_SONAME = $(NPD_CHASM_INIT_SHLIB_LINKERNAME).$(NPD_CHASM_INIT_SHLIB_MAJOR)
NPD_CHASM_INIT_SHLIB_REALNAME = $(NPD_CHASM_INIT_SHLIB_SONAME).$(NPD_CHASM_INIT_SHLIB_MINOR)

.PHONY: all

all: $(NPD_CHASM_INIT_SHLIB_REALNAME)
$(NPD_CHASM_INIT_SHLIB_REALNAME): $(BUILD_CHASM_OBJS)
	$(CC) $(LDFLAGS) -o $@ $^
	rm -rf $(LIB_EXPORT_DIR)/$(NPD_CHASM_INIT_SHLIB_REALNAME) $(LIB_EXPORT_DIR)/$(NPD_CHASM_INIT_SHLIB_SONAME) $(LIB_EXPORT_DIR)/$(NPD_CHASM_INIT_SHLIB_LINKERNAME)
	cp $(NPD_CHASM_INIT_SHLIB_REALNAME) $(LIB_EXPORT_DIR)/
	ln -s $(NPD_CHASM_INIT_SHLIB_REALNAME) $(LIB_EXPORT_DIR)/$(NPD_CHASM_INIT_SHLIB_SONAME)
	ln -s $(NPD_CHASM_INIT_SHLIB_SONAME) $(LIB_EXPORT_DIR)/$(NPD_CHASM_INIT_SHLIB_LINKERNAME)
	
$(BUILD_CHASM_OBJS): $(NPD_CHASM_SPEC_DEPFILES) 

dep: $(DC_LIST)
	@echo building file dependency done...
cleandep:
	rm -rf $(PROJECT_BUILD_DIR)/$(APP_TARGET_NAME)/$(NPD_CHASM_SPEC_DEPFILES)
	
$(NPD_CHASM_SPEC_DEPFILES):cleandep dep

include $(NPD_CHASM_SPEC_DEPFILES)

$(PROJECT_BUILD_DIR)/$(APP_TARGET_NAME)/%.o: %.c
	$(CC) -c $(CFLAGS) $(DBUS_INCLUDE) $(INCLUDES) $(DBUS_INCLUDE) -o $@ $<

$(PROJECT_BUILD_DIR)/$(APP_TARGET_NAME)/%.o: %.c
	$(CC) -c $(CFLAGS) $(INCLUDES) $(DBUS_INCLUDE) -o $@ $<

%.dc: %.c
	$(CC) $(CFLAGS) $(DBUS_INCLUDE) $(INCLUDES) -MM $< >>  $(NPD_CHASM_SPEC_DEPFILES)
		
.PHONY: clean
clean:
	rm -f $(PROJECT_BUILD_DIR)/$(APP_TARGET_NAME)/*
	rm -f $(NPD_CHASM_INIT_SHLIB_SONAME) $(NPD_CHASM_INIT_SHLIB_REALNAME) $(NPD_CHASM_INIT_SHLIB_REALNAME) 
	
