#ifndef __RETURNCODE_H__
#define __RETURNCODE_H__
/*
 * This file defines all common return codes 
 * which is used across modules.
 *
 * RETURN_CODE is always a unsigned long integer
 * All available values is devided into different sections to 
 * satisfy different modules requirements.
 *
 * RETURN CODE ASSIGNMENT IN NPD PROCESS IS AS FOLLOWS:
 * 	0x00010000		- ACL branch
 * 	0x00020000		- ARP branch
 * 	0x00030000		- CPLD branch
 * 	0x00040000		- DIAG branch
 * 	0x00050000		- EEPROM branch
 * 	0x00060000		- ETH-PORT branch
 * 	0x00070000		- FDB branch
 * 	0x00080000		- IGMP SNOOPING branch
 * 	0x00090000		- INTERFACE branch
 * 	0x000A0000		- MIRROR branch
 * 	0x000B0000		- PACKET TX/RX branch
 * 	0x000C0000		- PVLAN branch
 * 	0x000D0000		- QOS branch
 * 	0x000E0000		- ROUTE branch
 * 	0x000F0000		- STP/RSTP/MSTP branch
 * 	0x00100000		- TRUNK(LAG) branch
 * 	0x00110000		- UTILITY branch
 * 	0x00120000		- VLAN branch
 * 	0x00130000		- TUNNEL branch
 * 	0x00140000		- DLDP branch
 * 	0x00150000		- VRRP branch
 * 	0x00160000		- DHCP SNOOPING branch
 * 	0x00170000		- DHCP SERVER branch
 *    0x001E0000          - MLD Snooping branch
 * 	....
 *
 * */
/*Common branch*/
#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif
#define COMMON_SUCCESS						(0x0)								/* common success*/
#define COMMON_RETURN_CODE_BASE				(0x0)								/* common base*/
#define COMMON_ERROR						(COMMON_RETURN_CODE_BASE + 0x1)		/* common general error*/
#define COMMON_RETURN_CODE_NULL_PTR			(COMMON_RETURN_CODE_BASE + 0x2)		/* common null pointer error*/
#define COMMON_RETURN_CODE_NO_RESOURCE		(COMMON_RETURN_CODE_BASE + 0x3)		/* common no resource error*/
#define COMMON_RETURN_CODE_BADPARAM			(COMMON_RETURN_CODE_BASE + 0x4)		/* common bad parameter*/
#define COMMON_FAIL							(COMMON_RETURN_CODE_BASE + 0xFFFF)	/* common fail*/

#define DBUS_RETURN_CODE_BASE               (0x5000)
#define DBUS_RETURN_CODE_SUCCESS            COMMON_SUCCESS
#define DBUS_RETURN_CODE_NULL_REPLY         (DBUS_RETURN_CODE_BASE + 0x1)
#define DBUS_RETURN_CODE_PARM_ERROR         (DBUS_RETURN_CODE_BASE + 0x2)

/* ACL branch */
#define ACL_RETURN_CODE_BASE						(0x10000)
#define ACL_RETURN_CODE_SUCCESS 					COMMON_SUCCESS

#define ACL_RETURN_CODE_ERROR						(ACL_RETURN_CODE_BASE + 1)
#define ACL_RETURN_CODE_RULE_EXISTED				(ACL_RETURN_CODE_BASE + 2)
#define ACL_RETURN_CODE_RULE_NOT_EXISTED			(ACL_RETURN_CODE_BASE + 3)
#define ACL_RETURN_CODE_RULE_INDEX_ERROR			(ACL_RETURN_CODE_BASE + 4)
#define ACL_RETURN_CODE_RULE_NOT_BIND				(ACL_RETURN_CODE_BASE + 5)
#define ACL_RETURN_CODE_EXT_NO_SPACE				(ACL_RETURN_CODE_BASE + 6)

#define ACL_RETURN_CODE_GROUP_NOT_EXISTED 			(ACL_RETURN_CODE_BASE + 10)
#define ACL_RETURN_CODE_GROUP_INDEX_ERROR			(ACL_RETURN_CODE_BASE + 11)
#define ACL_RETURN_CODE_GROUP_SAME_ID		    	(ACL_RETURN_CODE_BASE + 12)
#define ACL_RETURN_CODE_GROUP_RULE_NOTEXISTED		(ACL_RETURN_CODE_BASE + 13)
#define ACL_RETURN_CODE_GROUP_RULE_EXISTED			(ACL_RETURN_CODE_BASE + 14)
#define ACL_RETURN_CODE_GROUP_PORT_NOTFOUND			(ACL_RETURN_CODE_BASE + 15)
#define ACL_RETURN_CODE_GROUP_PORT_BINDED    		(ACL_RETURN_CODE_BASE + 16)

#define ACL_RETURN_CODE_HW_GROUP_CREATE_ERROR		(ACL_RETURN_CODE_BASE + 21)
#define ACL_RETURN_CODE_EGRESS_GROUP_RULE_EXISTED   (ACL_RETURN_CODE_BASE + 22)
#define ACL_RETURN_CODE_ON_PORT_DISABLE         	(ACL_RETURN_CODE_BASE + 23)
#define ACL_RETURN_CODE_MIRROR_USE					(ACL_RETURN_CODE_BASE + 24)
#define ACL_RETURN_CODE_UNBIND_FIRST				(ACL_RETURN_CODE_BASE + 25)
#define ACL_RETURN_CODE_ENABLE_FIRST				(ACL_RETURN_CODE_BASE + 26)
#define ACL_RETURN_CODE_UNBIND_WRONG_GROUP			(ACL_RETURN_CODE_BASE + 27)
#define	ACL_RETURN_CODE_ACL_GLOBAL_DISABLE			(ACL_RETURN_CODE_BASE + 28)
#define	ACL_RETURN_CODE_GLOBAL_ALL_DISABLE			(ACL_RETURN_CODE_BASE + 29)
#define	ACL_RETURN_CODE_PORT_DISABLE				(ACL_RETURN_CODE_BASE + 30)
#define ACL_RETURN_CODE_DIR_NOT_SUPPORT             (ACL_RETURN_CODE_BASE + 31)

/* ACL branch subclass voice VLAN*/
#define VOICE_RETURN_CODE_BASE						(0x14000)
#define VOICE_RETURN_CODE_SUCCESS					COMMON_SUCCESS

#define VOICE_RETURN_CODE_ERROR						(VOICE_RETURN_CODE_BASE + 1)
#define	VOICE_RETURN_CODE_DISABLE					(VOICE_RETURN_CODE_BASE + 2)
#define	VOICE_RETURN_CODE_NOT_CONFIG				(VOICE_RETURN_CODE_BASE + 3)
#define	VOICE_RETURN_CODE_PORT_DISABLE				(VOICE_RETURN_CODE_BASE + 4)

/* ACL branch subclass match*/
#define	MATCH_RETURN_CODE_BASE						(0x18000)
#define MATCH_RETURN_CODE_SUCCESS					COMMON_SUCCESS

#define DIFFSERV_RETURN_CODE_ERROR					(MATCH_RETURN_CODE_BASE + 1)
#define CLASSMAP_RETURN_CODE_BINDED					(MATCH_RETURN_CODE_BASE + 2)
#define CLASSMAP_RETURN_CODE_NOTBINDED				(MATCH_RETURN_CODE_BASE + 3)
#define CLASSMAP_RETURN_CODE_EXIST					(MATCH_RETURN_CODE_BASE + 4)
#define CLASSMAP_RETURN_CODE_NOTEXIST				(MATCH_RETURN_CODE_BASE + 5)
#define CLASSMAP_RETURN_CODE_NOTFIND				(MATCH_RETURN_CODE_BASE + 6)
#define CLASSMAP_RETURN_CODE_ADDMATCH_ERROR			(MATCH_RETURN_CODE_BASE + 7)
#define CLASSMAP_RETURN_CODE_CREATE_ERROR			(MATCH_RETURN_CODE_BASE + 8)
#define CLASSMAP_RETURN_CODE_DELETEERROR			(MATCH_RETURN_CODE_BASE + 9)
#define CLASSMAP_RETURN_CODE_RULE_EMPTY				(MATCH_RETURN_CODE_BASE + 10)
#define	CLASSMAP_RETURN_CODE_BIND_NUM_ERROR			(MATCH_RETURN_CODE_BASE + 11)

#define POLICYMAP_RETURN_CODE_NOTEXIST				(MATCH_RETURN_CODE_BASE + 15)
#define POLICYMAP_RETURN_CODE_EXIST					(MATCH_RETURN_CODE_BASE + 16)
#define POLICYMAP_RETURN_CODE_DEPLOYED				(MATCH_RETURN_CODE_BASE + 17)
#define	POLICYMAP_RETURN_CODE_NOTDEPLOYED			(MATCH_RETURN_CODE_BASE + 18)
#define POLICYMAP_RETURN_CODE_CLASSMAP_EXIST		(MATCH_RETURN_CODE_BASE + 19)
#define	POLICYMAP_RETURN_CODE_CLASSMAP_NOTEXIST		(MATCH_RETURN_CODE_BASE + 20)
#define	POLICYMAP_RETURN_CODE_NOSUPPORT				(MATCH_RETURN_CODE_BASE + 21)
#define POLICYMAP_RETURN_CODE_NOTFIND				(MATCH_RETURN_CODE_BASE + 22)
#define POLICYMAP_RETURN_CODE_CREATE_ERROR			(MATCH_RETURN_CODE_BASE + 23)
#define POLICYMAP_RETURN_CODE_NOTCLASS				(MATCH_RETURN_CODE_BASE + 24)
#define POLICYMAP_RETURN_CODE_HAS_ADD_ACTION		(MATCH_RETURN_CODE_BASE + 25)
#define POLICYMAP_RETURN_CODE_RULE_EMPTY			(MATCH_RETURN_CODE_BASE + 26)
#define POLICYMAP_RETURN_CODE_NOTTHIS_CLASSMAP		(MATCH_RETURN_CODE_BASE + 27)
#define POLICYMAP_RETURN_CODE_ERROR_PARAM           (MATCH_RETURN_CODE_BASE + 28)
#define POLICYMAP_RETURN_CODE_BIND_ACL_GROUP        (MATCH_RETURN_CODE_BASE + 29)

#define	SERVICEPOLICY_RETURN_CODE_NOTSUPPORT		(MATCH_RETURN_CODE_BASE + 35)
#define	SERVICEPOLICY_RETURN_CODE_PORTEXIST			(MATCH_RETURN_CODE_BASE + 36)
#define	SERVICEPOLICY_RETURN_CODE_PORTNOTEXIST		(MATCH_RETURN_CODE_BASE + 37)
#define SERVICEPOLICY_RETURN_CODE_NOEXIST			(MATCH_RETURN_CODE_BASE + 38)
#define SERVICEPOLICY_RETURN_CODE_DIR_ERROR         (MATCH_RETURN_CODE_BASE + 41)
#define	DIFFSERV_RETURN_CODE_GLOBAL_DISABLE			(MATCH_RETURN_CODE_BASE + 39)
#define	DIFFSERV_RETURN_CODE_PORT_DISABLE			(MATCH_RETURN_CODE_BASE + 40)
#define DIFFSERV_RETURN_CODE_SERVICE_POLICY_EXIST   (MATCH_RETURN_CODE_BASE + 41)
#define DIFFSERV_RETURN_CODE_SERVICE_POLICY_NOT_EXIST   (MATCH_RETURN_CODE_BASE + 42) 
#define	SERVICEPOLICY_RETURN_CODE_VLANEXIST			(MATCH_RETURN_CODE_BASE + 43)
#define	SERVICEPOLICY_RETURN_CODE_VLANNOTEXIST		(MATCH_RETURN_CODE_BASE + 44)
#define TIME_RANGE_RETURN_NAME_NOEXIST              (MATCH_RETURN_CODE_BASE + 45)
#define TIME_RANGE_RETURN_NAME_ERROR                (MATCH_RETURN_CODE_BASE + 46)
#define TIME_RANGE_RETURN_TIME_FORMAT_ERROR         (MATCH_RETURN_CODE_BASE + 47)
#define TIME_RANGE_RETURN_ABS_TIME_HAS_EXISTED      (MATCH_RETURN_CODE_BASE + 48)
#define TIME_RANGE_RETURN_TIME_BUF_NULL             (MATCH_RETURN_CODE_BASE + 49)
#define TIME_RANGE_RETURN_PERIODIC_TIME_HAS_EXISTED (MATCH_RETURN_CODE_BASE + 50)
#define TIME_RANGE_RETURN_BIND_WITH_ACL             (MATCH_RETURN_CODE_BASE + 51)
#define TIME_RANGE_RETURN_BIND_WITH_TIME_RANGE      (MATCH_RETURN_CODE_BASE + 52)
#define TIME_RANGE_RETURN_NOT_BIND_WITH_TIME_RANGE  (MATCH_RETURN_CODE_BASE + 53)
#define TIME_RANGE_RETURN_ACL_BIND_OTHER_TIME_RANGE (MATCH_RETURN_CODE_BASE + 54)
#define TIME_RANGE_RETURN_DB_OPREATE_ERROR          (MATCH_RETURN_CODE_BASE + 55)
#define TIME_RANGE_RETURN_NEED_NOT_DEPLOY           (MATCH_RETURN_CODE_BASE + 56)
#define TIME_RANGE_RETURN_DATE_ILLEGAL              (MATCH_RETURN_CODE_BASE + 57)
#define TIME_RANGE_RETURN_DATE_LEGAL                (MATCH_RETURN_CODE_BASE + 58)
#define TIME_RANGE_RETURN_ITEM_FULL                 (MATCH_RETURN_CODE_BASE + 59)
#define SERVICE_POLICY_RETURN_VBMP_NULL             (MATCH_RETURN_CODE_BASE + 65)
#define SERVICE_POLICY_RETURN_VBMP_NOT_NULL         (MATCH_RETURN_CODE_BASE + 66)
#define SERVICE_POLICY_RETURN_ACL_BASED_VLAN_NOT_SUPPORT (MATCH_RETURN_CODE_BASE + 67)
#define SERVICE_POLICY_RETURN_ACL_VID_CONFLICT      (MATCH_RETURN_CODE_BASE + 68)
#define DIFFSERV_RETURN_CODE_L4_PORT_TCP_EXIST      (MATCH_RETURN_CODE_BASE + 70)
#define DIFFSERV_RETURN_CODE_L4_PORT_UDP_EXIST      (MATCH_RETURN_CODE_BASE + 71)
#define CLASSMAP_RETURN_CODE_NOT_ENOUGH_TCP_CMP     (MATCH_RETURN_CODE_BASE + 72)
#define CLASSMAP_RETURN_CODE_NOT_ENOUGH_UDP_CMP     (MATCH_RETURN_CODE_BASE + 73)
#define DIFFSERV_RETURN_CODE_L4PORT_DST_EXIST       (MATCH_RETURN_CODE_BASE + 74)
#define DIFFSERV_RETURN_CODE_L4PORT_SRC_EXIST       (MATCH_RETURN_CODE_BASE + 75)

#define DIFFSERV_RETURN_CODE_ACL_GROUP_CONFIG_FAILE (MATCH_RETURN_CODE_BASE + 90)
#define DIFFSERV_RETURN_ACL_GROUP_RULE_NOTEXIST     (MATCH_RETURN_CODE_BASE + 91)
#define DIFFSERV_RETURN_ACL_GROUP_RULE_FULL         (MATCH_RETURN_CODE_BASE + 92)
#define DIFFSERV_RETURN_ACL_GROUP_RULE_EXIST        (MATCH_RETURN_CODE_BASE + 93)
#define DIFFSERV_RETURN_ACL_GROUP_NOTEXIST          (MATCH_RETURN_CODE_BASE + 94)
#define DIFFSERV_RETURN_CODE_ACL_GROUP_DEPLOYED     (MATCH_RETURN_CODE_BASE + 95)
#define DIFFSERV_RETURN_CODE_ACL_GROUP_NOT_DEPLOYED (MATCH_RETURN_CODE_BASE + 96)
#define DIFFSERV_RETURN_CODE_ACL_GROUP_ITEM_FULL    (MATCH_RETURN_CODE_BASE + 97)
#define DIFFSERV_RETURN_ACL_GROUP_EMPTY             (MATCH_RETURN_CODE_BASE + 98)
#define DIFFSERV_RETURN_ACL_GROUP_DESP_EXIST        (MATCH_RETURN_CODE_BASE + 99)
#define DIFFSERV_RETURN_ACL_GROUP_DESP_NOEXIST      (MATCH_RETURN_CODE_BASE + 100)

/* ARP branch 0x20000 -- 0x2FFFF*/		
#define ARP_RETURN_CODE_BASE				(0x20000)		        		/* arp base code */
#define ARP_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)				/* arp success return code*/ 
#define ARP_RETURN_CODE_DUPLICATED			(ARP_RETURN_CODE_BASE + 0x1)	/* duplicate arp found */
#define ARP_RETURN_CODE_NOTEXISTS			(ARP_RETURN_CODE_BASE + 0x2)	/* the arp item not found */
#define ARP_RETURN_CODE_ACTION_TRAP2CPU		(ARP_RETURN_CODE_BASE + 0x3)	/* trap to cpu */
#define ARP_RETURN_CODE_NOTCONSISTENT		(ARP_RETURN_CODE_BASE + 0x4)	/* not consistent */
#define ARP_RETURN_CODE_TABLE_FULL			(ARP_RETURN_CODE_BASE + 0x5)	/* arp table is full */
#define ARP_RETURN_CODE_STATIC_EXIST		(ARP_RETURN_CODE_BASE + 0x6)	/* static arp item exists */
#define ARP_RETURN_CODE_STASTIC_NOTEXIST	(ARP_RETURN_CODE_BASE + 0x7)	/* static arp item does not exist */
#define ARP_RETURN_CODE_PORT_NOTMATCH		(ARP_RETURN_CODE_BASE + 0x8)	/* the port is not match when delete static arp */
#define ARP_RETURN_CODE_KERN_CREATE_FAILED	(ARP_RETURN_CODE_BASE + 0x9)	/* static arp kernal create failed */
#define ARP_RETURN_CODE_ACTION_HARD_DROP	(ARP_RETURN_CODE_BASE + 0xA)	/* hard drop */
#define ARP_RETURN_CODE_STATIC_ARP_FULL		(ARP_RETURN_CODE_BASE + 0xB)	/* the static arp is full : reach to 1024 */		
#define ARP_RETURN_CODE_HASH_OP_FAILED		(ARP_RETURN_CODE_BASE + 0xC)    /* arp hash table operation failed */
#define ARP_RETURN_CODE_NAM_ERROR			(ARP_RETURN_CODE_BASE + 0xD)    /* operation of nam error,maybe it's asic set failed*/
#define ARP_RETURN_CODE_NULL_PTR			(ARP_RETURN_CODE_BASE + 0xE)    /* null point error */
#define ARP_RETURN_CODE_NORESOURCE			(ARP_RETURN_CODE_BASE + 0xF)    /* no enough resource,eg. no enough memory*/
#define ARP_RETURN_CODE_BADPARAM			(ARP_RETURN_CODE_BASE + 0x10)   /* bad parameter when function call*/
#define ARP_RETURN_CODE_TBLINDEX_GET_FAILED	(ARP_RETURN_CODE_BASE + 0x11)	/* index alloc failed */
#define ARP_RETURN_CODE_INDEX_FREE_FAILED	(ARP_RETURN_CODE_BASE + 0x12)	/* index free failed */
#define ARP_RETURN_CODE_TRUNK_NOTMATCH		(ARP_RETURN_CODE_BASE + 0x13)	/* the trunk id is not match when delete static arp */
#define ARP_RETURN_CODE_CHECK_IP_ERROR		(ARP_RETURN_CODE_BASE + 0x14)  	/* check ip error when create static arp */
#define ARP_RETURN_CODE_NO_HAVE_ANY_IP		(ARP_RETURN_CODE_BASE + 0x15)	/* no have any ip when set static arp  */
#define ARP_RETURN_CODE_HAVE_THE_IP			(ARP_RETURN_CODE_BASE + 0x16)	/* have the same ip with which we want to set, when set static arp */
#define ARP_RETURN_CODE_NOT_SAME_SUB_NET	(ARP_RETURN_CODE_BASE + 0x17)	/* the ip we want to set is not in the same sub net with the intf,when set static arp */
#define ARP_RETURN_CODE_INTERFACE_NOTEXIST	(ARP_RETURN_CODE_BASE + 0x18)	/* interface not exists when arp operation */
#define ARP_RETURN_CODE_PORT_NOT_IN_VLAN	(ARP_RETURN_CODE_BASE + 0x19)   /* the port is not in the vlan when static arp operation */
#define ARP_RETURN_CODE_MAC_MATCHED_BASE_MAC	(ARP_RETURN_CODE_BASE + 0x1A)	/* config mac matched system mac */
#define ARP_RETURN_CODE_MAC_MATCHED_INTERFACE_MAC	(ARP_RETURN_CODE_BASE + 0x1B)	/* config mac matched interface's mac */
#define ARP_RETURN_CODE_FD_ERROR			(ARP_RETURN_CODE_BASE + 0x1C)	/* fd invalidate */
#define ARP_RETURN_CODE_NO_SUCH_PORT		(ARP_RETURN_CODE_BASE + 0x1D)	/* no such port */
#define ARP_RETURN_CODE_VLAN_NOTEXISTS		(ARP_RETURN_CODE_BASE + 0x1E)	/* vlan not exists */
#define ARP_RETURN_CODE_UNSUPPORTED_COMMAND	(ARP_RETURN_CODE_BASE + 0x1F)	/* unsupported command */
#define ARP_RETURN_CODE_TRUNK_NOT_EXISTS	(ARP_RETURN_CODE_BASE + 0x20)	/* trunk not exists when add or del arp */
#define ARP_RETURN_CODE_TRUNK_NOT_IN_VLAN	(ARP_RETURN_CODE_BASE + 0x21)	/* trunk not in the vlan when static arp operation */
#define ARP_RETURN_CODE_ALREADY_SET         (ARP_RETURN_CODE_BASE + 0x22)  
#define ARP_RETURN_CODE_DHCP_SNP_ENABLE     (ARP_RETURN_CODE_BASE + 0x23)  
#define ARP_RETURN_CODE_CONFLICTED_IP       (ARP_RETURN_CODE_BASE + 0x24)   /* have the same ip with l3 interface*/
#define ARP_RETURN_CODE_NO_HAVE_THE_IP		(ARP_RETURN_CODE_BASE + 0x25)	/* not have the same ip ,but in the same sub net,That's ok */
#define ARP_RETURN_CODE_NEED_PROXY		(ARP_RETURN_CODE_BASE + 0x26)	/* NEED TO SEND ARP REQUEST IN THIS INTERFACE*/
#define ARP_RETURN_CODE_INSP_NOTENABLE      (ARP_RETURN_CODE_BASE + 0x30)	/* arp inspection has not been globally enabled */
#define ARP_RETURN_CODE_ERROR				(ARP_RETURN_CODE_BASE + 0xFFFF)	/* error occured ,maybe unknow error*/
#define ARP_RETURN_CODE_MAX					(ARP_RETURN_CODE_BASE + 0xFFFF)	/* the max return code of arp module */


/* CPLD branch */
#define CPLD_RETURN_CODE_BASE				(0x30000)
#define CPLD_RETURN_CODE_OPEN_FAIL			(CPLD_RETURN_CODE_BASE + 0x01)
#define CPLD_RETURN_CODE_IOCTL_FAIL			(CPLD_RETURN_CODE_BASE + 0x02)

/* DIAG branch */
#define DIAG_RETURN_CODE_BASE			(0x40000)
#define DIAG_RETURN_CODE_SUCCESS 					COMMON_SUCCESS
#define DIAG_RETURN_CODE_ERROR 						COMMON_ERROR

/* EEPROM branch */
#define EEPROM_RETURN_CODE_BASE			        (0x50000)
#define EEPROM_RETURN_CODE_ NPD_SUCCESS        	(EEPROM_RETURN_CODE_BASE + 0x1)  /* express operate  success */
#define EEPROM_RETURN_CODE_NPD_FAIL            	(EEPROM_RETURN_CODE_BASE + 0x2)  /* express operate fail */

/* ETH-PORT branch */
#define ETHPORT_RETURN_CODE_BASE            (0x60000)
#define ETHPORT_RETURN_CODE_ERR_NONE      	(COMMON_SUCCESS)       			   /* success */   
#define ETHPORT_RETURN_CODE_ERR_GENERAL     (ETHPORT_RETURN_CODE_BASE + 0x1)   /* general failure */
#define ETHPORT_RETURN_CODE_NO_SUCH_PORT    (ETHPORT_RETURN_CODE_BASE + 0x2)   
#define ETHPORT_RETURN_CODE_NO_SUCH_TRUNK   (ETHPORT_RETURN_CODE_BASE + 0x3)  
#define ETHPORT_RETURN_CODE_NO_SUCH_VLAN    (ETHPORT_RETURN_CODE_BASE + 0x4) 
#define ETHPORT_RETURN_CODE_NO_SUCH_GROUP   (ETHPORT_RETURN_CODE_BASE + 0x5)
#define ETHPORT_RETURN_CODE_UNSUPPORT      	(ETHPORT_RETURN_CODE_BASE + 0x6)   
#define ETHPORT_RETURN_CODE_FLOWCTL_NODE    (ETHPORT_RETURN_CODE_BASE + 0x7)   
#define ETHPORT_RETURN_CODE_BACKPRE_NODE    (ETHPORT_RETURN_CODE_BASE + 0x8)   
#define ETHPORT_RETURN_CODE_DUPLEX_NODE     (ETHPORT_RETURN_CODE_BASE + 0x9)   
#define ETHPORT_RETURN_CODE_SPEED_NODE      (ETHPORT_RETURN_CODE_BASE + 0xA)  
#define ETHPORT_RETURN_CODE_NO_PVE        	(ETHPORT_RETURN_CODE_BASE + 0xB)   
#define ETHPORT_RETURN_CODE_ENABLE_FIRST    (ETHPORT_RETURN_CODE_BASE + 0xC)   
#define ETHPORT_RETURN_CODE_ALREADY_PORT    (ETHPORT_RETURN_CODE_BASE + 0xD)   
#define ETHPORT_RETURN_CODE_ALREADY_FLOW	(ETHPORT_RETURN_CODE_BASE + 0xE)   
#define ETHPORT_RETURN_CODE_ALREADY_HYBRID  (ETHPORT_RETURN_CODE_BASE + 0xF)   
#define ETHPORT_RETURN_CODE_NO_QOS_MODE		(ETHPORT_RETURN_CODE_BASE + 0x10)  
#define ETHPORT_RETURN_CODE_HYBRID_DSCP     (ETHPORT_RETURN_CODE_BASE + 0x11)  
#define ETHPORT_RETURN_CODE_HYBRID_UP		(ETHPORT_RETURN_CODE_BASE + 0x12) 
#define ETHPORT_RETURN_CODE_HYBRID_FLOW     (ETHPORT_RETURN_CODE_BASE + 0x13)
#define ETHPORT_RETURN_CODE_STD_RULE		(ETHPORT_RETURN_CODE_BASE + 0x14)
#define ETHPORT_RETURN_CODE_BAD_VALUE		(ETHPORT_RETURN_CODE_BASE + 0x15)
#define ETHPORT_RETURN_CODE_DUPLEX_MODE		(ETHPORT_RETURN_CODE_BASE + 0x16)
#define ETHPORT_RETURN_CODE_BAD_k		    (ETHPORT_RETURN_CODE_BASE + 0x17)
#define ETHPORT_RETURN_CODE_BAD_M		    (ETHPORT_RETURN_CODE_BASE + 0x18)
#define ETHPORT_RETURN_CODE_BAD_IPG		    (ETHPORT_RETURN_CODE_BASE + 0x19)
#define ETHPORT_RETURN_CODE_BOARD_IPG		(ETHPORT_RETURN_CODE_BASE + 0x1A)
#define ETHPORT_RETURN_CODE_ETH_GE_SFP		(ETHPORT_RETURN_CODE_BASE + 0x1B)
#define ETHPORT_RETURN_CODE_NOT_SUPPORT		(ETHPORT_RETURN_CODE_BASE + 0x1C)
#define ETHPORT_RETURN_CODE_ERR_OPERATE		(ETHPORT_RETURN_CODE_BASE + 0x1D)
#define ETHPORT_RETURN_CODE_ERROR_DUPLEX_FULL	(ETHPORT_RETURN_CODE_BASE + 0x1E)
#define ETHPORT_RETURN_CODE_ERROR_DUPLEX_HALF	(ETHPORT_RETURN_CODE_BASE + 0x1F)
#define ETHPORT_RETURN_CODE_ERR_HW          (ETHPORT_RETURN_CODE_BASE + 0x20)
#define ETHPORT_RETURN_CODE_ERR_SFPTYPE     (ETHPORT_RETURN_CODE_BASE + 0x21)
#define ETHPORT_RETURN_CODE_ERR_1000M_AN_DISABLED     (ETHPORT_RETURN_CODE_BASE + 0x22)


/* FDB branch */
#define FDB_RETURN_CODE_BASE                 (0x70000)                      	    /*return code base used in fdb modle*/     
#define FDB_RETURN_CODE_SUCCESS      	     (COMMON_SUCCESS)       			    /* success */   
#define FDB_RETURN_CODE_ERR_DBUS             (FDB_RETURN_CODE_BASE + 0x1)        /*return error occured reference to dbus*/
#define FDB_RETURN_CODE_GENERAL              (FDB_RETURN_CODE_BASE + 0x2)        /*return error occured not the following reason*/
#define FDB_RETURN_CODE_BADPARA              (FDB_RETURN_CODE_BASE + 0x3)        /*bad parameters*/
#define FDB_RETURN_CODE_OCCUR_HW           	 (FDB_RETURN_CODE_BASE + 0x4)        /*hardware err*/
#define FDB_RETURN_CODE_ITEM_ISMIRROR      	 (FDB_RETURN_CODE_BASE + 0x5)        /*item is mirrored*/
#define FDB_RETURN_CODE_NODE_EXIST         	 (FDB_RETURN_CODE_BASE + 0x6)        /*node has already exist*/
#define FDB_RETURN_CODE_NODE_NOT_EXIST     	 (FDB_RETURN_CODE_BASE + 0x7)         /*node not exist*/
#define FDB_RETURN_CODE_NODE_PORT_NOTIN_VLAN (FDB_RETURN_CODE_BASE + 0x8)        /*port not exist in vlan*/
#define FDB_RETURN_CODE_NODE_VLAN_NONEXIST   (FDB_RETURN_CODE_BASE + 0x9)        /* vlan not exist */
#define FDB_RETURN_CODE_SYSTEM_MAC         	 (FDB_RETURN_CODE_BASE + 0xA)        /*conflict with system mac*/
#define FDB_RETURN_CODE_HW_NOT_SUPPORT     	 (FDB_RETURN_CODE_BASE + 0xB)        /*hardware not support this function*/
#define FDB_RETURN_CODE_MAX                	 (FDB_RETURN_CODE_BASE + 0xC)        /*reserved value*/
#define FDB_RETURN_CODE_MALLOC             	 (FDB_RETURN_CODE_BASE + 0xD)        /*malloc failed*/
#define FDB_RETURN_CODE_NULL_PTR             (FDB_RETURN_CODE_BASE + 0xE)        /*NULL pointer error*/
#define FDB_RETURN_CODE_HASH_OP_FAIL         (FDB_RETURN_CODE_BASE + 0xF)        /*hash operation fail*/
#define FDB_RETURN_CODE_TRUNK_NO_MEMBER      (FDB_RETURN_CODE_BASE + 0x10)        /*hash operation fail*/
#define FDB_RETURN_CODE_SIWTCHPORT_NOT_EXIST (FDB_RETURN_CODE_BASE + 0x11)        /*Not a switchport*/


/* IGMP-SNOOPING branch */ 
#define	IGMPSNP_RETURN_CODE_BASE    			  (0x80000)							/* return code base  */  
#define	IGMPSNP_RETURN_CODE_OK					  (COMMON_RETURN_CODE_BASE)	        /* success   */   
#define	IGMPSNP_RETURN_CODE_ERROR				  (IGMPSNP_RETURN_CODE_BASE + 0x1)	/* error     */ 
#define	IGMPSNP_RETURN_CODE_ALREADY_SET			  (IGMPSNP_RETURN_CODE_BASE + 0x2)	/* already been setted */   
#define	IGMPSNP_RETURN_CODE_ENABLE_GBL			  (IGMPSNP_RETURN_CODE_BASE + 0x3)	/* IGMP_Snooping enabled global */   
#define	IGMPSNP_RETURN_CODE_NOT_ENABLE_GBL		  (IGMPSNP_RETURN_CODE_BASE + 0x4)	/* IGMP_Snooping not enabled global  */ 
#define	IGMPSNP_RETURN_CODE_OUT_RANGE			  (IGMPSNP_RETURN_CODE_BASE + 0x5)	/* timer value or count out of range  */
#define	IGMPSNP_RETURN_CODE_VLAN_NOT_EXIST		  (IGMPSNP_RETURN_CODE_BASE + 0x6)	/* L2 vlan not exixt   */
#define	IGMPSNP_RETURN_CODE_NOTENABLE_VLAN		  (IGMPSNP_RETURN_CODE_BASE + 0x7)	/* L2 vlan not enable IGMP_Snooping  */
#define	IGMPSNP_RETURN_CODE_HASENABLE_VLAN		  (IGMPSNP_RETURN_CODE_BASE + 0x8)	/* L2 vlan has enable IGMP_Snooping  */
#define	IGMPSNP_RETURN_CODE_PORT_NOT_EXIST		  (IGMPSNP_RETURN_CODE_BASE + 0x9)	/* port not exixt   */
#define	IGMPSNP_RETURN_CODE_NOTENABLE_PORT		  (IGMPSNP_RETURN_CODE_BASE + 0xA)	/* port not enable IGMP_Snooping  */
#define	IGMPSNP_RETURN_CODE_HASENABLE_PORT		  (IGMPSNP_RETURN_CODE_BASE + 0xB)	/* port has enable IGMP_Snooping  */
#define	IGMPSNP_RETURN_CODE_ROUTE_PORT_EXIST	  (IGMPSNP_RETURN_CODE_BASE + 0xC)	/* vlan has exist router port */
#define	IGMPSNP_RETURN_CODE_ROUTE_PORT_NOTEXIST	  (IGMPSNP_RETURN_CODE_BASE + 0xD)	/* vlan has not exist router port */
#define	IGMPSNP_RETURN_CODE_NOTROUTE_PORT		  (IGMPSNP_RETURN_CODE_BASE + 0xE)	/* port not configured as router port */
#define IGMPSNP_RETURN_CODE_MEMBER_PORT_EXIST     (IGMPSNP_RETURN_CODE_BASE + 0xF)
#define IGMPSNP_RETURN_CODE_MEMBER_PORT_NOT_EXIST (IGMPSNP_RETURN_CODE_BASE + 0x10)
#define IGMPSNP_RETURN_CODE_NOTMEMBER_PORT        (IGMPSNP_RETURN_CODE_BASE + 0x11) 
#define	IGMPSNP_RETURN_CODE_PORT_TRUNK_MBR		  (IGMPSNP_RETURN_CODE_BASE + 0x12)	/* port is trunk member */
#define	IGMPSNP_RETURN_CODE_GROUP_NOTEXIST		  (IGMPSNP_RETURN_CODE_BASE + 0x13)	/* multicast group not exist */
#define IGMPSNP_RETURN_CODE_GROUP_EXIST           (IGMPSNP_RETURN_CODE_BASE + 0x14) /* multicast group does exist */
#define IGMPSNP_RETURN_CODE_GROUP_STATIC          (IGMPSNP_RETURN_CODE_BASE + 0x15) /* multicast group is static */
#define IGMPSNP_RETURN_CODE_GROUP_FULL            (IGMPSNP_RETURN_CODE_BASE + 0x16) /* multicast group is full */
#define	IGMPSNP_RETURN_CODE_ERROR_HW			  (IGMPSNP_RETURN_CODE_BASE + 0x17)	/* set hardware error */
#define	IGMPSNP_RETURN_CODE_NULL_PTR			  (IGMPSNP_RETURN_CODE_BASE + 0x18)	/* parameter pointer is null  */ 
#define IGMPSNP_RETURN_CODE_GROUP_CFG_FULL        (IGMPSNP_RETURN_CODE_BASE + 0X19) /* config max-join-group is full*/

#define	IGMPSNP_RETURN_CODE_MVLAN_NOTENABLE		  (IGMPSNP_RETURN_CODE_BASE + 0x20)	/* L2 multicast vlan not enable */
#define	IGMPSNP_RETURN_CODE_MVLAN_HASENABLE		  (IGMPSNP_RETURN_CODE_BASE + 0x21)	/* L2 multicast vlan has enable */
#define	IGMPSNP_RETURN_CODE_MVLAN_NOTENABLE_PORT  (IGMPSNP_RETURN_CODE_BASE + 0x22)	/* port not enable IGMP_Snooping  */
#define	IGMPSNP_RETURN_CODE_MVLAN_HASENABLE_PORT  (IGMPSNP_RETURN_CODE_BASE + 0x23)	/* port has enable IGMP_Snooping  */


/* INTERFACE branch */		
#define INTF_TRUE									(0x1)									/* bool true for interface*/
#define INTF_FALSE									(0x0)									/* bool false for interface*/
#define INTERFACE_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)									/* interface success*/
#define INTERFACE_RETURN_CODE_BASE					(0x90000)							  	/* interface base code */
#define INTERFACE_RETURN_CODE_UNKNOWN_ERROR			(INTERFACE_RETURN_CODE_BASE + 0x1)  	/* unknown error code */
#define INTERFACE_RETURN_CODE_UNSUPPORT_COMMAND		(INTERFACE_RETURN_CODE_BASE + 0x2)  	/* unsupport this command */
#define INTERFACE_RETURN_CODE_VLAN_NOTEXIST			(INTERFACE_RETURN_CODE_BASE + 0x3)  	/* vlan does not exist when add or del intf */
#define INTERFACE_RETURN_CODE_INTERFACE_NOTEXIST	(INTERFACE_RETURN_CODE_BASE + 0x4)  	/* interface does not exist */
#define INTERFACE_RETURN_CODE_INTERFACE_EXIST		(INTERFACE_RETURN_CODE_BASE + 0x5)  	/* interface exists */
#define INTERFACE_RETURN_CODE_FD_ERROR				(INTERFACE_RETURN_CODE_BASE + 0x6)		/* fd illegal eg.fd <= 0 */
#define INTERFACE_RETURN_CODE_IOCTL_ERROR			(INTERFACE_RETURN_CODE_BASE + 0x7)		/* ioctl operation failed or other error */
#define INTERFACE_RETURN_CODE_NAM_ERROR				(INTERFACE_RETURN_CODE_BASE + 0x8)		/* error occured in nam maybe driver operation failed */
#define INTERFACE_RETURN_CODE_CHECK_MAC_ERROR		(INTERFACE_RETURN_CODE_BASE + 0x9)		/* mac check error */
#define INTERFACE_RETURN_CODE_FDB_SET_ERROR			(INTERFACE_RETURN_CODE_BASE + 0xA)		/* fdb set error when create or del intf */
#define INTERFACE_RETURN_CODE_MAC_GET_ERROR			(INTERFACE_RETURN_CODE_BASE + 0xB)		/* get mac failed when create or del intf */
#define INTERFACE_RETURN_CODE_ALREADY_ADVANCED		(INTERFACE_RETURN_CODE_BASE + 0xC)		/* the interface already advanced-routing interface*/
#define INTERFACE_RETURN_CODE_TRUNK_NOT_IN_VLAN		(INTERFACE_RETURN_CODE_BASE + 0xD)		/* the trunk is not in the vlan ,when config static arp */
#define INTERFACE_RETURN_CODE_GET_SYSMAC_ERROR		(INTERFACE_RETURN_CODE_BASE + 0xE)		/* get sysmac failed */
#define INTERFACE_RETURN_CODE_ROUTE_CREATE_SUBIF 	(INTERFACE_RETURN_CODE_BASE + 0xF)		/* eth-port interface create sub interface */
#define INTERFACE_RETURN_CODE_VLAN_IF_CREATE_SUBIF	(INTERFACE_RETURN_CODE_BASE + 0x10)		/* vlan interface create sub interface */
#define INTERFACE_RETURN_CODE_SUBIF_NOTEXIST		(INTERFACE_RETURN_CODE_BASE + 0x11)		/* the subif not exists */
#define INTERFACE_RETURN_CODE_PORT_NOT_IN_VLAN 		(INTERFACE_RETURN_CODE_BASE + 0x12)		/* the port is not in the special vlan */
#define INTERFACE_RETURN_CODE_ADD_PORT_FAILED 		(INTERFACE_RETURN_CODE_BASE + 0x13)		/* add port to vlan for subif failed */
#define INTERFACE_RETURN_CODE_SUBIF_EXISTS			(INTERFACE_RETURN_CODE_BASE + 0x14)		/* the sub interface already exists when create */
#define INTERFACE_RETURN_CODE_SUBIF_CREATE_FAILED	(INTERFACE_RETURN_CODE_BASE + 0x15)		/* sub interface create failed */
#define INTERFACE_RETURN_CODE_PARENT_IF_NOTEXIST	(INTERFACE_RETURN_CODE_BASE + 0x16)  	/* the parent interface does not exist when subif operation */
#define INTERFACE_RETURN_CODE_CONTAIN_PROMI_PORT	(INTERFACE_RETURN_CODE_BASE + 0x17)		/* vlan contains promis port when it is not permitted*/
#define INTERFACE_RETURN_CODE_NOT_ADVANCED			(INTERFACE_RETURN_CODE_BASE + 0x18)		/* the interface is not advanced-routing interface when advanced-routing disable */
#define INTERFACE_RETURN_CODE_NO_SUCH_PORT			(INTERFACE_RETURN_CODE_BASE + 0x19)		/* no such port */
#define INTERFACE_RETURN_CODE_ALREADY_THIS_MODE		(INTERFACE_RETURN_CODE_BASE + 0x1A)		/* eth port already run in this mode */
#define INTERFACE_RETURN_CODE_PORT_HAS_SUB_IF		(INTERFACE_RETURN_CODE_BASE + 0x1B)		/* eth port has sub if when change its mode */
#define INTERFACE_RETURN_CODE_DEFAULT_VLAN_IS_L3_VLAN	(INTERFACE_RETURN_CODE_BASE + 0x1C)	/* the default valn is l3 vlan when config port to promis mode */
#define INTERFACE_RETURN_CODE_ADVAN_VLAN_SET2_INTF	(INTERFACE_RETURN_CODE_BASE + 0x1D)		/* vlan 4094 set to intf */
#define INTERFACE_RETURN_CODE_QINQ_TWO_SAME_TAG		(INTERFACE_RETURN_CODE_BASE + 0x1E)		/* the internal tag is same as the external tag when crate qinq subif */
#define INTERFACE_RETURN_CODE_PROMIS_PORT_TAG_IN_VLAN (INTERFACE_RETURN_CODE_BASE + 0x1F)	/* there are promis port in this vlan with tag mode */
#define INTERFACE_RETURN_CODE_VLAN_IS_L3INTF		(INTERFACE_RETURN_CODE_BASE + 0x20)		/* the vlan is l3 intf some config is not allowed */
#define INTERFACE_RETURN_CODE_CAN_NOT_SET2_EMPTY	(INTERFACE_RETURN_CODE_BASE + 0x21)		/* can't set advanced-routing default to empty,maybe there are some eth advanced-routing intfs */
#define INTERFACE_RETURN_CODE_TAG_IS_ADVACED_VID	(INTERFACE_RETURN_CODE_BASE + 0x22)		/* the tag is advanced-routing default-vid */
#define INTERFACE_RETURN_CODE_DEL_PORT_FAILED		(INTERFACE_RETURN_CODE_BASE + 0x23)		/* del port failed when config interface */
#define INTERFCE_RETURN_CODE_ADVANCED_VLAN_NOT_EXISTS (INTERFACE_RETURN_CODE_BASE + 0x24)	/* advanced-routing default vid is empty when create eth advanced routing interface */
#define INTERFACE_RETURN_CODE_PORT_CONFLICT         (INTERFACE_RETURN_CODE_BASE + 0x25)     /* the port is contained by other vlan when create eth-port interface */
#define INTERFACE_RETURN_CODE_QINQ_TYPE_FULL        (INTERFACE_RETURN_CODE_BASE + 0x26)     /* qinq type set MAX COUNT types */
#define INTERFACE_RETURN_CODE_IP_CHECK_ERROR        (INTERFACE_RETURN_CODE_BASE + 0x27)     /* ip address check error */
#define INTERFACE_RETURN_CODE_NOT_SWITCHPORT        (INTERFACE_RETURN_CODE_BASE + 0x28)     /* not in switchport mode */
#define INTERFACE_RETURN_CODE_IFNAME_LENGTH_ERR     (INTERFACE_RETURN_CODE_BASE + 0x29)		/* interface name length too long*/
#define INTERFACE_RETURN_CODE_IFNAME_RESERVED       (INTERFACE_RETURN_CODE_BASE + 0x2A)		/* interface name is reserved*/
#define INTERFACE_RETURN_CODE_IFNAME_NOT_ALLOWED    (INTERFACE_RETURN_CODE_BASE + 0x2B)		/* interface name is not allowed*/
#define INTERFACE_RETURN_CODE_SWITCHPORT_MODE       (INTERFACE_RETURN_CODE_BASE + 0x2C)		/* interface is in switchport mode*/
#define INTERFACE_RETURN_CODE_NOT_ACCESS_MODE       (INTERFACE_RETURN_CODE_BASE + 0x2D)     /*interface is NOT in switchport access mode*/
#define INTERFACE_RETURN_CODE_ERROR					(INTERFACE_RETURN_CODE_BASE + 0xFFFF)	/* general error occured */
#define INTERFACE_RETURN_CODE_MAX					(INTERFACE_RETURN_CODE_BASE + 0xFFFF)	/* mac return code for interface */

/* IP-SOURCE-GUARD branch*/
#define IPSG_RETURN_CODE_SUCCESS                    (COMMON_SUCCESS)
#define IPSG_RETURN_CODE_BASE   					(0x98000)
#define IPSG_RETURN_CODE_ERROR                      (IPSG_RETURN_CODE_BASE + 0x1)
#define IPSG_RETURN_CODE_NOT_EXIST                  (IPSG_RETURN_CODE_BASE + 0x2)
#define IPSG_RETURN_CODE_ALREADY_SET                (IPSG_RETURN_CODE_BASE + 0x3)
#define IPSG_RETURN_CODE_OVER_MAX                   (IPSG_RETURN_CODE_BASE + 0x4)

/* MIRROR branch*/
#define MIRROR_RETURN_CODE_BASE         					(0xA0000)
#define MIRROR_RETURN_CODE_SUCCESS 							COMMON_SUCCESS
#define MIRROR_RETURN_CODE_ERROR 							(MIRROR_RETURN_CODE_BASE + 1) 
#define MIRROR_RETURN_CODE_ACTION_NOT_SUPPORT           	(MIRROR_RETURN_CODE_BASE + 2)
#define MIRROR_RETURN_CODE_SRC_PORT_EXIST			    	(MIRROR_RETURN_CODE_BASE + 3)
#define MIRROR_RETURN_CODE_SRC_PORT_NOTEXIST 		    	(MIRROR_RETURN_CODE_BASE + 4)
#define MIRROR_RETURN_CODE_SRC_PORT_CONFLICT            	(MIRROR_RETURN_CODE_BASE + 5)
#define MIRROR_RETURN_CODE_PROFILE_ID_OUTOFRANGE			(MIRROR_RETURN_CODE_BASE + 6)
#define MIRROR_RETURN_CODE_SRC_VLAN_EXIST			    	(MIRROR_RETURN_CODE_BASE + 7)
#define MIRROR_RETURN_CODE_SRC_VLAN_NOTEXIST		    	(MIRROR_RETURN_CODE_BASE + 8)
#define MIRROR_RETURN_CODE_VLAN_NOT_EXIST 			    	(MIRROR_RETURN_CODE_BASE + 9)
#define MIRROR_RETURN_CODE_DEST_PORT_NOTEXIST      	        (MIRROR_RETURN_CODE_BASE + 10)
#define MIRROR_RETURN_CODE_DEST_PORT_EXIST      	    	(MIRROR_RETURN_CODE_BASE + 11)
#define MIRROR_RETURN_CODE_DEST_PORT_CONFLICT      	    	(MIRROR_RETURN_CODE_BASE + 12)
#define MIRROR_RETURN_CODE_SRC_FDB_NOTEXIST   		    	(MIRROR_RETURN_CODE_BASE + 13)
#define MIRROR_RETURN_CODE_SRC_FDB_EXIST  			    	(MIRROR_RETURN_CODE_BASE + 14)
#define MIRROR_RETURN_CODE_ACL_GLOBAL_NOT_EXISTED       	(MIRROR_RETURN_CODE_BASE + 15)
#define MIRROR_RETURN_CODE_SRC_ACL_EXIST   			    	(MIRROR_RETURN_CODE_BASE + 16)
#define MIRROR_RETURN_CODE_SRC_ACL_NOTEXIST 		    	(MIRROR_RETURN_CODE_BASE + 17)
#define MIRROR_RETURN_CODE_FDB_MAC_BE_SYSMAC             	(MIRROR_RETURN_CODE_BASE + 18)
#define MIRROR_RETURN_CODE_PROFILE_CREATED	   			    (MIRROR_RETURN_CODE_BASE + 19)
#define MIRROR_RETURN_CODE_PROFILE_NOT_CREATED				(MIRROR_RETURN_CODE_BASE + 20)
#define MIRROR_RETURN_CODE_EXT_RULE_OLNY					(MIRROR_RETURN_CODE_BASE + 21)
#define MIRROR_RETURN_CODE_DBUS_ERR                         (MIRROR_RETURN_CODE_BASE + 22)
#define MIRROR_RETURN_CODE_REMOTE_VLAN_EXIST      	    	(MIRROR_RETURN_CODE_BASE + 23)
#define MIRROR_RETURN_CODE_REMOTE_VLAN_NOEXIST      	    (MIRROR_RETURN_CODE_BASE + 24)


/* PACKET RX/TX branch */                                    
#define	PACKET_RETURN_CODE_BASE			        (0xB0000)							/* return code base  */  
#define	PACKET_RETURN_CODE_OK			        (PACKET_RETURN_CODE_BASE + 0x1)		/* success   */  
#define	PACKET_RETURN_CODE_FAIL	            	(PACKET_RETURN_CODE_BASE + 0x2)   	/* fail      */
#define	PACKET_RETURN_CODE_ERROR		        (PACKET_RETURN_CODE_BASE + 0x3)		/* error     */ 
#define	PACKET_RETURN_CODE_ALLOC_MEM_NULL	    (PACKET_RETURN_CODE_BASE + 0x4)		/* alloc memory null   */ 
#define	PACKET_RETURN_CODE_BAD_SIZE		        (PACKET_RETURN_CODE_BASE + 0x5)		/* packet illegal size error */   

/* PVLAN branch */                                     
#define	PVLAN_RETURN_CODE_BASE			       		 	(0xC0000)	                    	/* return code base  */  
#define	PVLAN_RETURN_CODE_SUCCESS			       		COMMON_SUCCESS    	/* success   */   
#define	PVLAN_RETURN_CODE_ERROR			        		COMMON_ERROR		/* error     */ 
#define PVLAN_RETURN_CODE_AVOID_CYCLE_UPLINK			(PVLAN_RETURN_CODE_BASE + 0x3)
#define	PVLAN_RETURN_CODE_THIS_PORT_HAVE_PVE			(PVLAN_RETURN_CODE_BASE + 0x4)		/* port have been PVE port */ 
#define	PVLAN_RETURN_CODE_UPLINK_PORT_NOT_IN_SAME_VLAN	(PVLAN_RETURN_CODE_BASE + 0x5)	/* uplink port not be in same vlan */   
#define	PVLAN_RETURN_CODE_PORT_NOT_IN_ONLY_ONE_VLAN		(PVLAN_RETURN_CODE_BASE + 0x6)	/* pvlan port not be in one vlan  */ 
#define	PVLAN_RETURN_CODE_NO_SUCH_PORT	    			(PVLAN_RETURN_CODE_BASE + 0x7)		/* no such ports */   
#define	PVLAN_RETURN_CODE_NOT_SUPPORT		    		(PVLAN_RETURN_CODE_BASE + 0x8)		/* not support */  
#define	PVLAN_RETURN_CODE_NO_PVE		    		(PVLAN_RETURN_CODE_BASE + 0x9)		/* not support */  

/* QOS branch */
#define QOS_RETURN_CODE_BASE					(0xD0000)
#define QOS_RETURN_CODE_SUCCESS 				COMMON_SUCCESS

#define	QOS_RETURN_CODE_ERROR					(QOS_RETURN_CODE_BASE + 1)
#define QOS_RETURN_CODE_BAD_PARAM               (QOS_RETURN_CODE_BASE + 2)
#define QOS_RETURN_CODE_PROFILE_EXISTED			(QOS_RETURN_CODE_BASE + 3)
#define QOS_RETURN_CODE_PROFILE_NOT_EXISTED 	(QOS_RETURN_CODE_BASE + 4)
#define QOS_RETURN_CODE_PROFILE_IN_USE          (QOS_RETURN_CODE_BASE + 5)
#define QOS_RETURN_CODE_PROFILE_UP_FIRST        (QOS_RETURN_CODE_BASE + 6)
#define QOS_RETURN_CODE_WRED_DISABLE			(QOS_RETURN_CODE_BASE + 7)

#define QOS_RETURN_CODE_POLICY_EXISTED			(QOS_RETURN_CODE_BASE + 10)
#define QOS_RETURN_CODE_POLICY_NOT_EXISTED 		(QOS_RETURN_CODE_BASE + 11)
#define QOS_RETURN_CODE_POLICY_MAP_PORT_WRONG   (QOS_RETURN_CODE_BASE + 12)
#define QOS_RETURN_CODE_POLICY_MAP_BIND		    (QOS_RETURN_CODE_BASE + 13)
#define QOS_RETURN_CODE_POLICY_NO_MAPPED		(QOS_RETURN_CODE_BASE + 14)
#define QOS_RETURN_CODE_NOT_BIND_POLICYMAP		(QOS_RETURN_CODE_BASE + 15)

#define QOS_RETURN_CODE_POLICER_NOT_EXISTED 	(QOS_RETURN_CODE_BASE + 20)
#define QOS_RETURN_CODE_POLICER_USE_IN_ACL      (QOS_RETURN_CODE_BASE + 21)
#define QOS_RETURN_CODE_POLICER_CBS_BIG         (QOS_RETURN_CODE_BASE + 22)
#define QOS_RETURN_CODE_POLICER_CBS_LITTLE      (QOS_RETURN_CODE_BASE + 23)
#define QOS_RETURN_CODE_COUNTER_NOT_EXISTED 	(QOS_RETURN_CODE_BASE + 24)
#define QOS_RETURN_CODE_COUNTER_USED			(QOS_RETURN_CODE_BASE + 25)
#define QOS_RETURN_CODE_COUNTER_EXISTED     (QOS_RETURN_CODE_BASE + 26)

#define QOS_RETURN_CODE_MODE_CONFLICT			(QOS_RETURN_CODE_BASE + 31)
#define QOS_RETURN_CODE_BIND_POLICY_MAP			(QOS_RETURN_CODE_BASE + 32)
#define QOS_RETURN_CODE_BIND_INGRESS_GID		(QOS_RETURN_CODE_BASE + 33)
#define QOS_RETURN_CODE_BIND_EGRESS_GID			(QOS_RETURN_CODE_BASE + 34)
#define QOS_RETURN_CODE_BIND_SERVERPOLICY		(QOS_RETURN_CODE_BASE + 35)
#define QOS_RETURN_CODE_BIND_VOICEVLAN			(QOS_RETURN_CODE_BASE + 36)

/* ROUTE branch */
#define ROUTE_RETURN_CODE_BASE             	(0xE0000)                       	/*return code base used in route modle*/
#define ROUTE_RETURN_CODE_SUCCESS          	(COMMON_SUCCESS)    	/*return success*/
#define ROUTE_RETURN_CODE_BAD_VALUE        	(ROUTE_RETURN_CODE_BASE + 0x2)    	/* Illegal value */
#define ROUTE_RETURN_CODE_OUT_OF_RANGE     	(ROUTE_RETURN_CODE_BASE + 0x3)    	/* Value is out of range*/
#define ROUTE_RETURN_CODE_BAD_PARAM        	(ROUTE_RETURN_CODE_BASE + 0x4)    	/* Illegal parameter in function called  */
#define ROUTE_RETURN_CODE_BAD_STATE        	(ROUTE_RETURN_CODE_BASE + 0x5)    	/* Illegal state of state machine        */
#define ROUTE_RETURN_CODE_SET_ERROR        	(ROUTE_RETURN_CODE_BASE + 0x6)    	/* Set operation failed                  */
#define ROUTE_RETURN_CODE_GET_ERROR        	(ROUTE_RETURN_CODE_BASE + 0x7)    	/* Get operation failed                  */
#define ROUTE_RETURN_CODE_CREATE_ERROR     	(ROUTE_RETURN_CODE_BASE + 0x8)    	/* Fail while creating an item           */
#define ROUTE_RETURN_CODE_NOT_FOUND        	(ROUTE_RETURN_CODE_BASE + 0x9)    	/* Item not found                        */
#define ROUTE_RETURN_CODE_NO_MORE          	(ROUTE_RETURN_CODE_BASE + 0xA)  	/* No more items found                   */
#define ROUTE_RETURN_CODE_NO_SUCH          	(ROUTE_RETURN_CODE_BASE + 0xB)  	/* No such item                          */
#define ROUTE_RETURN_CODE_NO_CHANGE        	(ROUTE_RETURN_CODE_BASE + 0xC)  	/* The parameter is already in this value*/
#define ROUTE_RETURN_CODE_NOT_SUPPORTED   	(ROUTE_RETURN_CODE_BASE + 0xD)  	/* This request is not support           */
#define ROUTE_RETURN_CODE_NOT_IMPLEMENTED  	(ROUTE_RETURN_CODE_BASE + 0xE)  	/* This request is not implemented       */
#define ROUTE_RETURN_CODE_NO_RESOURCE      	(ROUTE_RETURN_CODE_BASE + 0xF)  	/* Resource not available/accessble (memory ...)   */
#define ROUTE_RETURN_CODE_FULL            	(ROUTE_RETURN_CODE_BASE + 0x10)   	/* Item is full (Queue or table etc...)  */
#define ROUTE_RETURN_CODE_EMPTY            	(ROUTE_RETURN_CODE_BASE + 0x11)   	/* Item is empty (Queue or table etc...) */
#define ROUTE_RETURN_CODE_INIT_ERROR       	(ROUTE_RETURN_CODE_BASE + 0x12)  	/* Error occurred while INIT process      */
#define ROUTE_RETURN_CODE_ALREADY_EXIST    	(ROUTE_RETURN_CODE_BASE + 0x13)   	/* Tried to create existing item         */
#define ROUTE_RETURN_CODE_NULL_PTR          (ROUTE_RETURN_CODE_BASE + 0x14)     /* route null pointer*/
#define ROUTE_RETURN_CODE_HASH_OP_FAILED	(ROUTE_RETURN_CODE_BASE + 0x15)		/* route hash table push or pull failed */
#define ROUTE_RETURN_CODE_NOTCONSISTENT		(ROUTE_RETURN_CODE_BASE + 0x16)		/* route item is not consistent*/
#define ROUTE_RETURN_CODE_ERROR				(ROUTE_RETURN_CODE_BASE + 0x17)		/* route general error occured*/
#define ROUTE_RETURN_CODE_ACTION_TRAP2CPU	(ROUTE_RETURN_CODE_BASE + 0x18)		/* route action trap to cpu */
#define ROUTE_RETURN_CODE_ACTION_HARD_DROP	(ROUTE_RETURN_CODE_BASE + 0x19)		/* route action hard drop */
	

/* STP/RSTP/MSTP branch */
#define STP_RETURN_CODE_BASE                         (0xF0000)                      	 /*return code base used in stp modle*/
#define STP_RETURN_CODE_ERR_NONE                     (COMMON_SUCCESS)
#define STP_RETURN_CODE_SUCCESS                      (STP_RETURN_CODE_BASE + 0x1)     /*return success*/
#define STP_RETURN_CODE_RSTP_NOT_ENABLED             (STP_RETURN_CODE_BASE + 0x2)     /*RSTP hasn't enabled*/
#define STP_RETURN_CODE_RSTP_HAVE_ENABLED            (STP_RETURN_CODE_BASE + 0x3)     /*RSTP is already enabled*/
#define STP_RETURN_CODE_MSTP_NOT_ENABLED             (STP_RETURN_CODE_BASE + 0x4)     /*MSTP hasn't enabled*/
#define STP_RETURN_CODE_MSTP_HAVE_ENABLED            (STP_RETURN_CODE_BASE + 0x5)     /*MSTP is already enabled*/
#define STP_RETURN_CODE_PORT_NOT_ENABLED             (STP_RETURN_CODE_BASE + 0x6)     /*This port hasn't enabled*/
#define STP_RETURN_CODE_PORT_HAVE_ENABLED            (STP_RETURN_CODE_BASE + 0x7)     /*This port is already enabled*/
#define STP_RETURN_CODE_Small_Bridge_Priority        (STP_RETURN_CODE_BASE + 0x8)     /*The bridge priority is small*/
#define STP_RETURN_CODE_Large_Bridge_Priority        (STP_RETURN_CODE_BASE + 0x9)     /*The bridge priority is large*/
#define STP_RETURN_CODE_Small_Max_Hops               (STP_RETURN_CODE_BASE + 0xA)     /*The max hops is small*/
#define STP_RETURN_CODE_Large_Max_Hops               (STP_RETURN_CODE_BASE + 0xB)     /*The max hops is large*/
#define STP_RETURN_CODE_Small_Hello_Time             (STP_RETURN_CODE_BASE + 0xC)     /*The hello time is small*/
#define STP_RETURN_CODE_Large_Hello_Time             (STP_RETURN_CODE_BASE + 0xD)   	 /*The hello time is large*/
#define STP_RETURN_CODE_Small_Max_Age                (STP_RETURN_CODE_BASE + 0xE)     /*The max age is small*/
#define STP_RETURN_CODE_Large_Max_Age                (STP_RETURN_CODE_BASE + 0xF)     /*The max age is large*/
#define STP_RETURN_CODE_Small_Forward_Delay          (STP_RETURN_CODE_BASE + 0x10)    /*The forward delay is small*/
#define STP_RETURN_CODE_Large_Forward_Delay          (STP_RETURN_CODE_BASE + 0x11)    /*The forward delay is large*/
#define STP_RETURN_CODE_Fwd_Delay_And_Max_Age_Are_Inconsistent 		(STP_RETURN_CODE_BASE + 0x12)    /*The forward delay and the max age should be content with: Max-Age<=2*(Forward-Delay-1)*/
#define STP_RETURN_CODE_Hello_Time_And_Max_Age_Are_Inconsistent         (STP_RETURN_CODE_BASE + 0x13)    /*The hello time and the max age should be content with:2*(hello-time+1)<=Max-Age*/
#define STP_RETURN_CODE_Hello_Time_And_Forward_Delay_Are_Inconsistent   (STP_RETURN_CODE_BASE + 0x14)    /*The hello time and the forward delay should be contend with: 2*(hello-time +1)<=2*(forward-delay - 1)*/ 
#define STP_RETURN_CODE_ERR_GENERAL          				(STP_RETURN_CODE_BASE + 0x15) /* STP general failure */
#define STP_RETURN_CODE_STP_HAVE_ENABLED					(STP_RETURN_CODE_BASE + 0x16)
#define STP_RETURN_CODE_STP_NOT_ENABLED        				(STP_RETURN_CODE_BASE + 0x17)
#define STP_RETURN_CODE_Priority_Format_Err 				(STP_RETURN_CODE_BASE + 0x18)
#define STP_RETURN_CODE_REGION_NAME_ERR						(STP_RETURN_CODE_BASE + 0x19)
#define STP_RETURN_CODE_REVISION_OUT_OF_RANGE				(STP_RETURN_CODE_BASE + 0x1A)
#define STP_RETURN_CODE_MSTID_OUT_OF_RANGE					(STP_RETURN_CODE_BASE + 0x1B)
#define STP_RETURN_CODE_BRIDGE_PRI_OUT_OF_RANGE				(STP_RETURN_CODE_BASE + 0x1C)
#define STP_RETURN_CODE_BRIDGE_PRI_FORMAT_ERR				(STP_RETURN_CODE_BASE + 0x1D)
#define STP_RETURN_CODE_PORT_PATH_COST_FORMAT_ERR	        (STP_RETURN_CODE_BASE + 0x1E)
#define STP_RETURN_CODE_MST_PORT_PRIORITY_OUT_OF_RANGE	    (STP_RETURN_CODE_BASE + 0x1F)
#define STP_RETURN_CODE_MST_PORT_PRIORITY_FORMAT_ERR	    (STP_RETURN_CODE_BASE + 0x20)
#define STP_RETURN_CODE_MST_DIGEST_STRING_ILLEGAL   	    (STP_RETURN_CODE_BASE + 0x21)


/* TRUNK(LAG) branch */
#define TRUNK_RETURN_CODE_BASE 			        (0x100000)
#define TRUNK_RETURN_CODE_ERR_NONE      	    (COMMON_SUCCESS)			   /*success */   
#define TRUNK_RETURN_CODE_ERR_GENERAL          	(TRUNK_RETURN_CODE_BASE + 0x1) /* general failure */
#define TRUNK_RETURN_CODE_BADPARAM      	    (TRUNK_RETURN_CODE_BASE + 0x2) /* bad parameters */
#define TRUNK_RETURN_CODE_TRUNK_EXISTS        	(TRUNK_RETURN_CODE_BASE + 0x3) /* trunk have been created already */
#define TRUNK_RETURN_CODE_TRUNK_NOTEXISTS      	(TRUNK_RETURN_CODE_BASE + 0x4) /* trunk does not exists */
#define TRUNK_RETURN_CODE_ERR_HW      		    (TRUNK_RETURN_CODE_BASE + 0x5) /* trunk error when operation on HW */
#define TRUNK_RETURN_CODE_PORT_EXISTS      	    (TRUNK_RETURN_CODE_BASE + 0x6) /* port already exists in trunk */
#define TRUNK_RETURN_CODE_PORT_NOTEXISTS       	(TRUNK_RETURN_CODE_BASE + 0x7) /* port is not a member of trunk */
#define TRUNK_RETURN_CODE_NAME_CONFLICT        	(TRUNK_RETURN_CODE_BASE + 0x8) /* vlan name conflict */
#define TRUNK_RETURN_CODE_MEMBERSHIP_CONFICT   	(TRUNK_RETURN_CODE_BASE + 0x9) /* this port is already a member of other trunk */
#define TRUNK_RETURN_CODE_ALLOW_ERR        	    (TRUNK_RETURN_CODE_BASE + 0xA) /* Error occurs in trunk port add to allowed vlans */
#define TRUNK_RETURN_CODE_REFUSE_ERR           	(TRUNK_RETURN_CODE_BASE + 0xB) /* Error occurs in trunk port delete from refused vlans */ 
#define TRUNK_RETURN_CODE_MEMBER_ADD_ERR       	(TRUNK_RETURN_CODE_BASE + 0xC) /* Error on adding this port to default or allowed vlans */ 
#define TRUNK_RETURN_CODE_MEMBER_DEL_ERR       	(TRUNK_RETURN_CODE_BASE + 0xD) /* Error on deleting this port from allowed vlans */
#define TRUNK_RETURN_CODE_GET_ALLOWVLAN_ERR	    (TRUNK_RETURN_CODE_BASE + 0xE) /* operation on getting trunk allow vlanlist fails */
#define TRUNK_RETURN_CODE_NO_MEMBER        	    (TRUNK_RETURN_CODE_BASE + 0xF)  /* there exists no member in trunk */
#define TRUNK_RETURN_CODE_SET_TRUNKID_ERR	    (TRUNK_RETURN_CODE_BASE + 0x10)  /* Error on setting port trunkId */
#define TRUNK_RETURN_CODE_DEL_MASTER_PORT      	(TRUNK_RETURN_CODE_BASE + 0x11)  /* master port NOT allowd to delete */
#define TRUNK_RETURN_CODE_PORT_ENABLE		    (TRUNK_RETURN_CODE_BASE + 0x12)  /* port enalbe in trunk */
#define TRUNK_RETURN_CODE_PORT_NOTENABLE       	(TRUNK_RETURN_CODE_BASE + 0x13)  /*  port disable in trunk */
#define TRUNK_RETURN_CODE_ALLOW_VLAN		    (TRUNK_RETURN_CODE_BASE + 0x14)  /* vlan already allow in trunk */
#define TRUNK_RETURN_CODE_NOTALLOW_VLAN		    (TRUNK_RETURN_CODE_BASE + 0x15)  /* vlan not allow in trunk */
#define TRUNK_RETURN_CODE_LOAD_BANLC_CONFLIT   	(TRUNK_RETURN_CODE_BASE + 0x16)  /* trunk load balance mode same to original */
#define TRUNK_RETURN_CODE_VLAN_TAGMODE_ERR	    (TRUNK_RETURN_CODE_BASE + 0x17)  /* trunk %d tagMode error in vlan */
#define TRUNK_RETURN_CODE_PORT_LINK_DOWN       	(TRUNK_RETURN_CODE_BASE + 0x18)  /* The port must be link first */
#define TRUNK_RETURN_CODE_UNSUPPORT		        (TRUNK_RETURN_CODE_BASE + 0x19)  /* The device isn't supported this mode set */
#define TRUNK_RETURN_CODE_PORT_L3_INTFG		    (TRUNK_RETURN_CODE_BASE + 0x1A)  /* this port is L3 interface */
#define TRUNK_RETURN_CODE_PORT_MBRS_FULL        (TRUNK_RETURN_CODE_BASE + 0x1B)  /* trunk port member full */
#define TRUNK_RETURN_CODE_PORT_CONFIG_DIFFER    (TRUNK_RETURN_CODE_BASE + 0x1C)  /* port has a differ configuration with master port */
#define TRUNK_RETURN_CODE_ERR_MAX               (TRUNK_RETURN_CODE_BASE + 0x1D)  /* all trunk is occupied*/
#define TRUNK_RETURN_CODE_GLOBAL_LACP_DISABLE   (TRUNK_RETURN_CODE_BASE + 0x1E)  /* Global lacp disable*/
#define TRUNK_RETURN_V_CASCADE_LINK_USING       (TRUNK_RETURN_CODE_BASE + 0x1F)  /*Using as cascade link for virtual-lag*/
#define TRUNK_RETURN_CODE_V_LOCAL               (TRUNK_RETURN_CODE_BASE + 0x20)  /*Using as local lag for v-lag*/
#define TRUNK_RETURN_CODE_V_L_LAG_EXIST         (TRUNK_RETURN_CODE_BASE + 0x21)  /* local lag has existed*/
#define TRUNK_RETURN_CODE_V_CASCADE_LAG_NOEXIST (TRUNK_RETURN_CODE_BASE + 0x22)   /*cascade lag does not existed*/
#define TRUNK_RETURN_CODE_V_CASCADE_LAG_SPECIFIED (TRUNK_RETURN_CODE_BASE + 0x23) /*specified as cascade link*/
#define TRUNK_RETURN_CODE_V_L_LAG_OTHERV          (TRUNK_RETURN_CODE_BASE + 0x24) /*local lag in other v-lag*/
#define TRUNK_RETURN_CODE_V_L_LAG_NOEXIST         (TRUNK_RETURN_CODE_BASE + 0x25) /*local lag not exist*/
#define TRUNK_RETURN_CODE_V_CASCADE_LAG_EXIST     (TRUNK_RETURN_CODE_BASE + 0x26) /*cascade lag exists*/
#define TRUNK_RETURN_CODE_V_CASCADE_LAG_NOSPECIFIED (TRUNK_RETURN_CODE_BASE + 0x27) /*not specified as cascade link*/
#define TRUNK_RETURN_CODE_V_LAG_NOEXIST             (TRUNK_RETURN_CODE_BASE + 0x28) /*virtual LAG not exists*/

/* UTILITY branch */
#define UTILUS_RETURN_CODE_BASE        		    (0x110000)
#define UTILUS_RETURN_CODE_STP_OK               (UTILUS_RETURN_CODE_BASE)       /* stp operate success */
#define UTILUS_RETURN_CODE_BASE_STP_ERROR       (UTILUS_RETURN_CODE_BASE + 0x1) /* (VID < 0 || VID > STP_MAX_VID) */
#define UTILUS_RETURN_CODE_STP_CANNOT_CREATE_INSTANCE_FOR_VLAN  (UTILUS_RETURN_CODE_BASE + 0x2)    /* stp can't establish instance base vlan */ 
#define UTILUS_RETURN_CODE_STP_DISABLE          (UTILUS_RETURN_CODE_BASE + 0x3) /* express STP_DISABLE */
#define UTILUS_RETURN_CODE_STP_CANNOT_CREATE_INSTANCE_FOR_PORT   (UTILUS_RETURN_CODE_BASE + 0x4)    /*stp can't establish instance base port */ 
#define UTILUS_RETURN_CODE_ERR_NO_MATCH         (UTILUS_RETURN_CODE_BASE + 0x5) /* no match message */
#define UTILUS_RETURN_CODE_ERR_DEVICE_NUMBER    (UTILUS_RETURN_CODE_BASE + 0x6) /* express devNum >= dev_max */
#define UTILUS_RETURN_CODE_ERR_PORT_ON_DEVICE	(UTILUS_RETURN_CODE_BASE + 0x7) /* express virtPortNo > port_max */
#define UTILUS_RETURN_CODE_SLOT_SUCCESS         (UTILUS_RETURN_CODE_BASE + 0x8) /* express operate  success */
#define UTILUS_RETURN_CODE_ERR_SLOT_OUT_OF_RANGE    (UTILUS_RETURN_CODE_BASE + 0xA) /* express slot > slot max */
#define UTILUS_RETURN_CODE_ERR_PORT_OUT_OF_RANGE    (UTILUS_RETURN_CODE_BASE + 0xB) /* express port > port max */
#define UTILUS_RETURN_CODE_ERR_MODULE_NOT_SUPPORT   (UTILUS_RETURN_CODE_BASE + 0xC) /* express operate not support */
#define UTILUS_RETURN_CODE_DIAG_SUCCESS         (UTILUS_RETURN_CODE_BASE + 0xD)/* express operate  success */
#define UTILUS_RETURN_CODE_FAIL                 (UTILUS_RETURN_CODE_BASE + 0xE)/*  express operate fail */
#define UTILUS_RETURN_CODE_FALSE                (UTILUS_RETURN_CODE_BASE + 0x10)/* express operate false */
#define UTILUS_RETURN_CODE_SUCCESS              (UTILUS_RETURN_CODE_BASE + 0x11)/* express operate  success */
#define UTILUS_RETURN_CODE_LOG_SUCCESS          (UTILUS_RETURN_CODE_BASE + 0x12)/* express operate  success */
#define UTILUS_RETURN_CODE_TRUE                 (UTILUS_RETURN_CODE_BASE + 0x13)/* express operate true */
#define UTILUS_RETURN_CODE_NULL                 (UTILUS_RETURN_CODE_BASE + 0x14)/* show NULL */
#define UTILUS_RETURN_CODE_MAIN_SUCCESS         (UTILUS_RETURN_CODE_BASE + 0x15) /* express operate  success  */
#define UTILUS_RETURN_CODE_ILLEGALL             (UTILUS_RETURN_CODE_BASE + 0x16) /*  parameters illegall*/
#define UTILUS_RETURN_CODE_PARAMETER            (UTILUS_RETURN_CODE_BASE + 0x17) /* input parameter to long */
#define UTILUS_RETURN_CODE_NOT_EQUAL_SYSTEM_MAC (UTILUS_RETURN_CODE_BASE + 0x18) /* given mac address not  same as system base mac address*/
#define UTILUS_RETURN_CODE_EQUAL_SYSTEM_MAC     (UTILUS_RETURN_CODE_BASE + 0x19) /* the given mac address  same as system base mac address*/
#define UTILUS_RETURN_CODE_BUFFWE_SMALL         (UTILUS_RETURN_CODE_BASE + 0x1A) /* mac address buffer size too small*/
#define UTILUS_RETURN_CODE_ILLEGAL_CHARACTER    (UTILUS_RETURN_CODE_BASE + 0x1B) /* illegal character found*/
#define UTILUS_RETURN_CODE_ERROR_OCCUR          (UTILUS_RETURN_CODE_BASE + 0x1C) /* if no error occur */
#define UTILUS_RETURN_CODE_NPD_DBUS_SUCCESS     (UTILUS_RETURN_CODE_BASE + 0x1E) /*   sucess */
#define UTILUS_RETURN_CODE_NPD_DBUS_ERROR       (UTILUS_RETURN_CODE_BASE + 0x1F) /* general use, no detail error information */
#define UTILUS_RETURN_CODE_NAM_DIAG_SUCCESS     (UTILUS_RETURN_CODE_BASE + 0x20) /* general use, show operate successinformation */
#define UTILUS_RETURN_CODE_NAM_DIAG_FAIL        (UTILUS_RETURN_CODE_BASE + 0x21) /* show operate fail */
#define UTILUS_RETURN_CODE_NAM_DIAG_TRUE 	    (UTILUS_RETURN_CODE_BASE + 0x22) /* show operate true */
#define UTILUS_RETURN_CODE_NAM_DIAG_FALSE	    (UTILUS_RETURN_CODE_BASE + 0x23) /* show operate false */
#define UTILUS_RETURN_CODE_NAM_DIAG_NULL	    (UTILUS_RETURN_CODE_BASE + 0x24) /* show  NULL */
#define UTILUS_RETURN_CODE_DEBUG_NAM_SET_FIAL   (UTILUS_RETURN_CODE_BASE + 0x25) /* if debug level has already been set before*/
#define UTILUS_RETURN_CODE_DEBUG_NAM_SET_SUCCESS    (UTILUS_RETURN_CODE_BASE + 0x26) /* debug level setup successfully */
#define UTILUS_RETURN_CODE_DEBUG_NBM_SET_FIAL       (UTILUS_RETURN_CODE_BASE + 0x27) /* if debug level has already been set before */
#define UTILUS_RETURN_CODE_DEBUG_NBM_SET_SUCCESS    (UTILUS_RETURN_CODE_BASE + 0x28) /* debug level setup successfully */
#define UTILUS_RETURN_CODE_BASE_NPD_OK          (UTILUS_RETURN_CODE_BASE + 0x29) /* operate success */

/* VLAN branch */
#define VLAN_RETURN_CODE_BASE			    (0x120000)
#define VLAN_RETURN_CODE_ERR_NONE      		(COMMON_SUCCESS)		        /*success */   
#define VLAN_RETURN_CODE_ERR_GENERAL        (VLAN_RETURN_CODE_BASE + 0x1)   /* general failure */
#define VLAN_RETURN_CODE_BADPARAM      		(VLAN_RETURN_CODE_BASE + 0x2)   /* bad parameters */
#define VLAN_RETURN_CODE_VLAN_EXISTS       	(VLAN_RETURN_CODE_BASE + 0x3)   /* vlan have been created already */
#define VLAN_RETURN_CODE_NAME_CONFLICT      (VLAN_RETURN_CODE_BASE + 0x4)   /* vlan name conflict */
#define VLAN_RETURN_CODE_VLAN_NOT_EXISTS    (VLAN_RETURN_CODE_BASE + 0x5)   /* vlan does not exists */
#define VLAN_RETURN_CODE_ERR_HW      		(VLAN_RETURN_CODE_BASE + 0x6)   /* vlan error when operation on HW */
#define VLAN_RETURN_CODE_PORT_EXISTS       	(VLAN_RETURN_CODE_BASE + 0x7)   /* port already exists in vlan */
#define VLAN_RETURN_CODE_PORT_NOTEXISTS        	(VLAN_RETURN_CODE_BASE + 0x8)   /* port is not a member of vlan */
#define VLAN_RETURN_CODE_PORT_MBRSHIP_CONFLICT 	(VLAN_RETURN_CODE_BASE + 0x9)   /* port can NOT be Untag member of different vlans */
#define VLAN_RETURN_CODE_L3_INTF        	    (VLAN_RETURN_CODE_BASE + 0xA) /* vlan is L3 interface */
#define VLAN_RETURN_CODE_PORT_TAG_CONFLICT     	(VLAN_RETURN_CODE_BASE + 0xB) /* port Tag-Mode not match */
#define VLAN_RETURN_CODE_TRUNK_MEMBER_NONE    	(VLAN_RETURN_CODE_BASE + 0xC) /* trunk has no member when add to vlan */
#define VLAN_RETURN_CODE_PORT_PROMISCUOUS_MODE_ADD2_L3INTF  	(VLAN_RETURN_CODE_BASE + 0xD) /* the promiscuous mode port add to l3 interface */
#define VLAN_RETURN_CODE_PORT_DEL_PROMIS_PORT_TO_DFLT_VLAN_INTF	(VLAN_RETURN_CODE_BASE + 0xE) /* del promiscuous port but default is l3 intf */
#define VLAN_RETURN_CODE_SUBINTF_EXISTS     	 (VLAN_RETURN_CODE_BASE + 0xF) /* sub intf exists */
#define VLAN_RETURN_CODE_CONTAINS_ROUTE_PORT	 (VLAN_RETURN_CODE_BASE + 0x10)  /* vlan contains route mod port */
#define VLAN_RETURN_CODE_PORT_PROMIS_PORT_CANNOT_ADD2_VLAN (VLAN_RETURN_CODE_BASE + 0x11)  /* promis try to add to other vlan(not vlan 1) */
#define VLAN_RETURN_CODE_PORT_SUBINTF_EXISTS	 (VLAN_RETURN_CODE_BASE + 0x12)  /* port sub interface exists*/
#define VLAN_RETURN_CODE_PORT_L3_INTF        	 (VLAN_RETURN_CODE_BASE + 0x13) /* port is L3 interface */
#define VLAN_RETURN_CODE_TRUNK_EXISTS		     (VLAN_RETURN_CODE_BASE + 0x14) /* trunk already member of vlan*/
#define VLAN_RETURN_CODE_TRUNK_NOTEXISTS	     (VLAN_RETURN_CODE_BASE + 0x15) /* trunk is not member of vlan*/
#define VLAN_RETURN_CODE_TRUNK_CONFLICT		     (VLAN_RETURN_CODE_BASE + 0x16) /* trunk already untagged member of other active vlan */
#define VLAN_RETURN_CODE_PORT_TRUNK_MBR		     (VLAN_RETURN_CODE_BASE + 0x17) /* port belong to trunk ,it can NOT add to vlan as port */
#define VLAN_RETURN_CODE_TRUNK_MBRSHIP_CONFLICT	 (VLAN_RETURN_CODE_BASE + 0x18) /* trunk membership conflict */
#define VLAN_RETURN_CODE_NOT_SUPPORT_IGMP_SNP 	 (VLAN_RETURN_CODE_BASE + 0x19) 
#define VLAN_RETURN_CODE_IGMP_ROUTE_PORTEXIST	 (VLAN_RETURN_CODE_BASE + 0x1A) 
#define VLAN_RETURN_CODE_IGMP_ROUTE_PORTNOTEXIST (VLAN_RETURN_CODE_BASE + 0x1B) 
#define VLAN_RETURN_CODE_ARP_STATIC_CONFLICT	 (VLAN_RETURN_CODE_BASE + 0x1C) 
#define VLAN_RETURN_CODE_ERR_MAX	             (VLAN_RETURN_CODE_BASE + 0x1D) 
#define VLAN_RETURN_CODE_PROMIS_PORT_CANNOT_DEL	 (VLAN_RETURN_CODE_BASE + 0x1E) /* del a promis port from advanced-routing-default-vid is not allowed */
#define VLAN_RETURN_CODE_ADVANCED_VLAN_CANNOT_DEL (VLAN_RETURN_CODE_BASE + 0x1F) /* can't delete vlan when it is advanced-routing default-vid */
#define VLAN_RETURN_CODE_CONFIG_NOT_ALLOWED		 (VLAN_RETURN_CODE_BASE + 0x21) 	/*advanced-routing default vlan is not allowed to config*/
#define VLAN_RETURN_CODE_PORT_NOT_SWTICHMODE     (VLAN_RETURN_CODE_BASE + 0x22)
#define VLAN_RETURN_CODE_PORT_ACCESS_MODE_CONFLICT (VLAN_RETURN_CODE_BASE + 0x23)
#define VLAN_RETURN_CODE_VLAN_NOT_PRIVLAN          (VLAN_RETURN_CODE_BASE + 0x24)
#define VLAN_RETURN_CODE_PORT_MUTLIVLAN           (VLAN_RETURN_CODE_BASE + 0x25)
#define VLAN_RETURN_CODE_MACBASE_EXIST          (VLAN_RETURN_CODE_BASE + 0x26)
#define VLAN_RETURN_CODE_SUBNETBASE_EXIST       (VLAN_RETURN_CODE_BASE + 0x27)
#define VLAN_RETURN_CODE_VLAN_PROTO_EXISTS      (VLAN_RETURN_CODE_BASE + 0x28)
#define VLAN_RETURN_CODE_VLAN_PROTO_NOEXISTS    (VLAN_RETURN_CODE_BASE + 0x29)
#define VLAN_RETURN_CODE_XLATE_CONFILCT          (VLAN_RETURN_CODE_BASE + 0x2a)
#define VLAN_RETURN_CODE_XLATE_NO_EXIST          (VLAN_RETURN_CODE_BASE + 0x2b)
#define VLAN_RETURN_CODE_PORT_TPID_CONFLICT     (VLAN_RETURN_CODE_BASE + 0x2c)
#define VLAN_RETURN_CODE_XLATE_NOMORE           (VLAN_RETURN_CODE_BASE + 0x2d)
#define VLAN_RETURN_CODE_MACBASE_OTHER_EXIST    (VLAN_RETURN_CODE_BASE + 0x2e)
#define VLAN_RETURN_CODE_SUBNETBASE_OTHER_EXIST  (VLAN_RETURN_CODE_BASE + 0x2f)
#define VLAN_RETURN_CODE_VLAN_PROTO_NOMATCH    	(VLAN_RETURN_CODE_BASE + 0x30)
#define VLAN_RETURN_CODE_PORT_TRUNK_MODE_CONFLICT	(VLAN_RETURN_CODE_BASE + 0x31)
#define VLAN_RETURN_CODE_XLATE_OUTER_RANGE_OVERLAP	(VLAN_RETURN_CODE_BASE + 0x32)
#define VLAN_RETURN_CODE_XLATE_INNER_RANGE_OVERLAP	(VLAN_RETURN_CODE_BASE + 0x33)
#define VLAN_RETURN_CODE_XLATE_OUTER_RANGE_FULL		(VLAN_RETURN_CODE_BASE + 0x34)
#define VLAN_RETURN_CODE_ELINE_CONFILCT          (VLAN_RETURN_CODE_BASE + 0x35)
#define VLAN_RETURN_CODE_ELINE_NO_EXIST          (VLAN_RETURN_CODE_BASE + 0x36)
#define VLAN_RETURN_CODE_ELINE_VLAN_CONFILCT     (VLAN_RETURN_CODE_BASE + 0x37)
#define VLAN_RETURN_CODE_PORT_ELINE_CONFLICT		(VLAN_RETURN_CODE_BASE + 0x38)
#define VLAN_RETURN_CODE_PORT_ELINE_NO_PORT			(VLAN_RETURN_CODE_BASE + 0x39)
#define VLAN_RETURN_CODE_PORT_ELINE_FULL			(VLAN_RETURN_CODE_BASE + 0x3A)
#define VLAN_RETURN_CODE_PORT_QINQ_CONFIG_EXIST		(VLAN_RETURN_CODE_BASE + 0x3B)
#define VLAN_RETURN_CODE_XLATE_INNER_RANGE_FULL		(VLAN_RETURN_CODE_BASE + 0x3C)
#define VLAN_RETURN_CODE_PORT_ISOLATED				(VLAN_RETURN_CODE_BASE + 0x3D)
#define VLAN_RETURN_CODE_PORT_NOT_ISOLATED			(VLAN_RETURN_CODE_BASE + 0x3E)
#define VLAN_RETURN_CODE_SECOND_VLAN_NO_ASSOC		(VLAN_RETURN_CODE_BASE + 0x3F)
#define VLAN_RETURN_CODE_NO_ISOLATE_VLAN			(VLAN_RETURN_CODE_BASE + 0x40)
#define VLAN_RETURN_CODE_SECOND_VLAN_ASSOC_OTHER	(VLAN_RETURN_CODE_BASE + 0x41)
#define VLAN_RETURN_CODE_PORT_PVID_NOT_DEFAULT 		(VLAN_RETURN_CODE_BASE + 0x42)
#define VLAN_RETURN_CODE_PORT_PVID_NOT_PVLAN 		(VLAN_RETURN_CODE_BASE + 0x43)
#define VLAN_RETURN_CODE_IS_NOT_PRIMARY_VLAN		(VLAN_RETURN_CODE_BASE + 0x44)
#define VLAN_RETURN_CODE_IS_PRIVATE_VLAN			(VLAN_RETURN_CODE_BASE + 0x45)
#define VLAN_RETURN_CODE_NOT_PRIVATE_VLAN			(VLAN_RETURN_CODE_BASE + 0x46)
#define VLAN_RETURN_CODE_PRIMARY_VLAN_HAS_ASSOC		(VLAN_RETURN_CODE_BASE + 0x47)
#define VLAN_RETURN_CODE_PVLAN_CONFIG_NOT_ALLOWED	(VLAN_RETURN_CODE_BASE + 0x48) 
#define VLAN_RETURN_CODE_PVLAN_TRUNK_NOT_SUPPORT	(VLAN_RETURN_CODE_BASE + 0x49) 
#define VLAN_RETURN_CODE_ISOLATE_BEFORE_PRIMARY		(VLAN_RETURN_CODE_BASE + 0x4A) 


/* TUNNEL branch */
#define TUNNEL_RETURN_CODE_BASE		        	(0x130000)
#define	TUNNEL_RETURN_CODE_SUCCESS			       		COMMON_SUCCESS    	/* success   */   
#define	TUNNEL_RETURN_CODE_ERROR			        		COMMON_ERROR		/* error     */ 
#define TUNNEL_RETURN_CODE_NOTEXISTS_1		(TUNNEL_RETURN_CODE_BASE + 1)
#define TUNNEL_RETURN_CODE_NULLPOINTER_2		(TUNNEL_RETURN_CODE_BASE + 2)
#define TUNNEL_RETURN_CODE_TABLE_FULL_3		(TUNNEL_RETURN_CODE_BASE + 3)
#define TUNNEL_RETURN_CODE_DUPLICATED_4		(TUNNEL_RETURN_CODE_BASE + 4)
#define TUNNEL_RETURN_CODE_EXISTS_5			(TUNNEL_RETURN_CODE_BASE + 5)
#define TUNNEL_RETURN_CODE_TSFULL_6			(TUNNEL_RETURN_CODE_BASE + 6)
#define TUNNEL_RETURN_CODE_TTFULL_7			(TUNNEL_RETURN_CODE_BASE + 7)
#define TUNNEL_RETURN_CODE_NHFULL_8			(TUNNEL_RETURN_CODE_BASE + 8)
#define TUNNEL_RETURN_CODE_RT_HOST_EXISTS_9			(TUNNEL_RETURN_CODE_BASE + 9)
#define TUNNEL_RETURN_CODE_DSTIP_NOT_EXISTS_10			(TUNNEL_RETURN_CODE_BASE + 10)

/* DLDP branch */
#define	DLDP_RETURN_CODE_BASE	              	(0x140000)		       /* return code base  */  
#define	DLDP_RETURN_CODE_OK	       	            (DLDP_RETURN_CODE_BASE + 0x1)  /* success   */ 
#define	DLDP_RETURN_CODE_FAIL             	    (DLDP_RETURN_CODE_BASE + 0x2)  /* FAIL */
#define	DLDP_RETURN_CODE_ERROR	             	(DLDP_RETURN_CODE_BASE + 0x3)  /* error */ 
#define	DLDP_RETURN_CODE_ALREADY_SET	        (DLDP_RETURN_CODE_BASE + 0x4)  /* already been seted */   
#define	DLDP_RETURN_CODE_ENABLE_GBL	            (DLDP_RETURN_CODE_BASE + 0x5)  /* DLDP enabled global */   
#define	DLDP_RETURN_CODE_NOT_ENABLE_GBL	        (DLDP_RETURN_CODE_BASE + 0x6)  /* DLDP not enabled global  */ 
#define	DLDP_RETURN_CODE_OUT_RANGE	            (DLDP_RETURN_CODE_BASE + 0x7)  /* timer value out of range  */
#define	DLDP_RETURN_CODE_SAME_VALUE	            (DLDP_RETURN_CODE_BASE + 0x8)  /* set same value to DLDP timers*/ 
#define	DLDP_RETURN_CODE_GET_DETECT_E	        (DLDP_RETURN_CODE_BASE + 0x9)  /* get DLDP detect timers error */ 
#define	DLDP_RETURN_CODE_GET_REDETECT_E	        (DLDP_RETURN_CODE_BASE + 0xA)  /* get DLDP re-detect timers error*/  
#define	DLDP_RETURN_CODE_VLAN_NOT_EXIST	        (DLDP_RETURN_CODE_BASE + 0xB)  /* L2 vlan not exixt   */
#define	DLDP_RETURN_CODE_NOTENABLE_VLAN	        (DLDP_RETURN_CODE_BASE + 0xC)  /* L2 vlan not enable DLDP  */
#define	DLDP_RETURN_CODE_HASENABLE_VLAN	        (DLDP_RETURN_CODE_BASE + 0xD)  /* L2 vlan has enable DLDP  */
#define	DLDP_RETURN_CODE_NULL_PTR	            (DLDP_RETURN_CODE_BASE + 0xE)  /* parameter pointer is null  */ 
#define	DLDP_RETURN_CODE_HASH_TABLE_FULL	    (DLDP_RETURN_CODE_BASE + 0xF)  /* hash table has full   */
#define	DLDP_RETURN_CODE_HASH_DUPLICATED	    (DLDP_RETURN_CODE_BASE + 0x10)  /* hash table has duplicated */  
#define	DLDP_RETURN_CODE_HASH_NORESOURCE	    (DLDP_RETURN_CODE_BASE + 0x11)  /* hash item alloc memory null */ 
#define	DLDP_RETURN_CODE_HASH_NOTEXISTS	        (DLDP_RETURN_CODE_BASE + 0x12)  /* hash item not exist   */
#define	DLDP_RETURN_CODE_ALLOC_MEM_NULL	        (DLDP_RETURN_CODE_BASE + 0x13)  /* alloc memory null   */ 
#define	DLDP_RETURN_CODE_HASH_FOUND	            (DLDP_RETURN_CODE_BASE + 0x14)  /* found hash item   */ 
#define	DLDP_RETURN_CODE_HASH_NOTFOUND	        (DLDP_RETURN_CODE_BASE + 0x15)  /* not found hash iteml   */

/* VRRP branch */
/*RETURN VALUE*/
#define VRRP_RETURN_CODE_BASE                  (0x150000)
#define VRRP_RETURN_CODE_OK		               (COMMON_RETURN_CODE_BASE)
#define VRRP_RETURN_CODE_ERR		           (VRRP_RETURN_CODE_BASE + 0x1)
#define VRRP_RETURN_CODE_PROFILE_OUT_OF_RANGE  (VRRP_RETURN_CODE_BASE + 0x2)
#define VRRP_RETURN_CODE_PROFILE_EXIST         (VRRP_RETURN_CODE_BASE + 0x3)
#define VRRP_RETURN_CODE_PROFILE_NOTEXIST      (VRRP_RETURN_CODE_BASE + 0x4)
#define VRRP_RETURN_CODE_MALLOC_FAILED         (VRRP_RETURN_CODE_BASE + 0x5)
#define VRRP_RETURN_CODE_BAD_PARAM             (VRRP_RETURN_CODE_BASE + 0x6)  
#define VRRP_RETURN_CODE_PROFILE_NOT_PREPARE   (VRRP_RETURN_CODE_BASE + 0x7)  
#define VRRP_RETURN_CODE_SERVICE_NOT_PREPARE   (VRRP_RETURN_CODE_BASE + 0x8)
#define VRRP_RETURN_CODE_INSTANCE_CHECK_FAILED (VRRP_RETURN_CODE_BASE + 0x9)
#define VRRP_RETURN_CODE_INSTANCE_NO_CREATED   (VRRP_RETURN_CODE_BASE + 0xA)
#define VRRP_RETURN_CODE_OPER_ALREADY_SET      (VRRP_RETURN_CODE_BASE + 0xB)
#define VRRP_RETURN_CODE_TRACK_INTF_NOT_EXIST  (VRRP_RETURN_CODE_BASE + 0XC)
#define VRRP_RETURN_CODE_TRACK_REPRIO_NOT_MATCH (VRRP_RETURN_CODE_BASE + 0XD)
#define VRRP_RETURN_CODE_TRACK_IP_OWNER		   (VRRP_RETURN_CODE_BASE + 0XE)
#define VRRP_RETURN_CODE_IP_OWNER			   (VRRP_RETURN_CODE_BASE + 0XF)
#define VRRP_RETURN_CODE_VIP_OUT_RANGE         (VRRP_RETURN_CODE_BASE + 0x11)
#define VRRP_RETURN_CODE_VIP_CHECK_ERROR       (VRRP_RETURN_CODE_BASE + 0x12)
#define VRRP_RETURN_CODE_INTERFACE_NO_IP       (VRRP_RETURN_CODE_BASE + 0x13)
#define VRRP_RETUNR_CODE_INTERFACE_NO_HW_ADDR  (VRRP_RETURN_CODE_BASE + 0x14)
#define VRRP_RETURN_CODE_VIP_EXIST             (VRRP_RETURN_CODE_BASE + 0x15)
#define VRRP_RETURN_CODE_VIP_NOTEXIST          (VRRP_RETURN_CODE_BASE + 0x16)
#define VRRP_RETURN_CODE_REDUCE_PRIO_SMALLER_TO_VRRP_PRIORITY  (VRRP_RETURN_CODE_BASE + 0x17)
#define VRRP_RETURN_CODE_TRACK_GROUP_EXIST      (VRRP_RETURN_CODE_BASE + 0x18)
#define VRRP_RETURN_CODE_TRACK_INTERFACE_EXIST  (VRRP_RETURN_CODE_BASE + 0x19)
#define VRRP_RETURN_CODE_INTERFACE_VRRP_NOT_COMPARE     (VRRP_RETURN_CODE_BASE + 0x1a)
#define VRRP_RETURN_CODE_CANNOT_TRACK_ITSELF            (VRRP_RETURN_CODE_BASE + 0x1b)
#define VRRP_RETURN_CODE_INTERFACE_VMAC_USED            (VRRP_RETURN_CODE_BASE + 0x1c)
#define VRRP_RETURN_CODE_INTERFACE_ILLEGAL_IP            (VRRP_RETURN_CODE_BASE + 0x1d)


/* NPD-track branch */
/* RETURN VALUE for tracking-group */
#define NPD_RETURN_CODE_TRACKING_CODE_BASE              (0x151000)
#define	NPD_RETURN_CODE_TRACKING_SUCCESS                (COMMON_RETURN_CODE_BASE)
#define	NPD_RETURN_CODE_TRACKING_ERROR                  (NPD_RETURN_CODE_TRACKING_CODE_BASE + 1)
#define NPD_RETURN_CODE_TRACKING_NOT_EXIST              (NPD_RETURN_CODE_TRACKING_CODE_BASE + 2)
#define NPD_RETURN_CODE_TRACKING_OBJECT_NOT_EXIST       (NPD_RETURN_CODE_TRACKING_CODE_BASE + 3)
#define NPD_RETURN_CODE_TRACKING_OBJECT_EXIST           (NPD_RETURN_CODE_TRACKING_CODE_BASE + 4)
#define NPD_RETURN_CODE_TRACKING_OBJECT_MAX_OVER        (NPD_RETURN_CODE_TRACKING_CODE_BASE + 5)
#define NPD_RETURN_CODE_TRACKING_OBJECT_NULL            (NPD_RETURN_CODE_TRACKING_CODE_BASE + 6)
#define NPD_RETURN_CODE_TRACKING_INTERFACE_NOT_EXIST    (NPD_RETURN_CODE_TRACKING_CODE_BASE + 7)
#define	NPD_RETURN_CODE_TRACKING_GET_NETIF_STATUS_ERROR (NPD_RETURN_CODE_TRACKING_CODE_BASE + 8)

/* smart-link branch */
#define SMART_LINK_RETURN_CODE_BASE                     (0x152000)
#define	SMART_LINK_RETURN_CODE_SUCCESS                  (COMMON_SUCCESS)
#define	SMART_LINK_RETURN_CODE_ERROR                    (SMART_LINK_RETURN_CODE_BASE + 1)
#define	SMART_LINK_RETURN_CODE_GROUP_ENABLE             (SMART_LINK_RETURN_CODE_BASE + 2)
#define	SMART_LINK_RETURN_CODE_GROUP_NOT_EXIST          (SMART_LINK_RETURN_CODE_BASE + 3)
#define	SMART_LINK_RETURN_CODE_GROUP_INCOMPLEATE        (SMART_LINK_RETURN_CODE_BASE + 4)
#define	SMART_LINK_RETURN_CODE_MSTI_INCOMPLEATE         (SMART_LINK_RETURN_CODE_BASE + 5)

/* ip m4 tunnel branch */
#define NPD_IP_TUNNEL_RETURN_CODE_BASE                     (0x153000)
#define	NPD_IP_TUNNEL_RETURN_CODE_SUCCESS                  (COMMON_SUCCESS)
#define	NPD_IP_TUNNEL_RETURN_CODE_ERROR                    (NPD_IP_TUNNEL_RETURN_CODE_BASE + 1)
#define	NPD_IP_TUNNEL_RETURN_CODE_CONFLICT                 (NPD_IP_TUNNEL_RETURN_CODE_BASE + 2)

/* DHCP SNOOPING branch */
#define DHCP_SNOOPING_RETURN_CODE_BASE			(0x160000)
#define DHCP_SNP_RETURN_CODE_OK				(COMMON_RETURN_CODE_BASE)				/* success						*/
#define DHCP_SNP_RETURN_CODE_ERROR			(DHCP_SNOOPING_RETURN_CODE_BASE + 0x1)				/* error 							*/
#define DHCP_SNP_RETURN_CODE_ALREADY_SET	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x2)				/* already been seted				*/
#define DHCP_SNP_RETURN_CODE_ENABLE_GBL		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x3)				/* DHCP-Snooping enabled global	*/
#define DHCP_SNP_RETURN_CODE_NOT_ENABLE_GBL	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x4)				/* DHCP-Snooping not enabled global	*/
#define DHCP_SNP_RETURN_CODE_OUT_RANGE		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x5)				/* out of range					*/
#define DHCP_SNP_RETURN_CODE_NO_SUCH_PORT	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x6)				/* slotno or portno is not legal		*/
#define DHCP_SNP_RETURN_CODE_ALLOC_MEM_NULL	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x7)				/* alloc memory null				*/
#define DHCP_SNP_RETURN_CODE_FOUND			(DHCP_SNOOPING_RETURN_CODE_BASE + 0x8)				/* found							*/
#define DHCP_SNP_RETURN_CODE_NOT_FOUND		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x9)				/* not found						*/
#define DHCP_SNP_RETURN_CODE_PKT_DROP		(DHCP_SNOOPING_RETURN_CODE_BASE + 0xA)				/* DHCP packet is not legal, drop it	*/
#define DHCP_SNP_RETURN_CODE_PARAM_NULL		(DHCP_SNOOPING_RETURN_CODE_BASE + 0xB)				/* error,parameter is null			*/
#define DHCP_SNP_RETURN_CODE_OPEN_DB_FAIL	(DHCP_SNOOPING_RETURN_CODE_BASE + 0xC)				/* open dhcp snooping db fail		*/
#define DHCP_SNP_RETURN_CODE_EN_OPT82		(DHCP_SNOOPING_RETURN_CODE_BASE + 0xD)				/* DHCP-Snooping enabled option82	*/
#define DHCP_SNP_RETURN_CODE_NOT_EN_OPT82	(DHCP_SNOOPING_RETURN_CODE_BASE + 0xE)				/* DHCP-Snooping not enabled option82	*/
#define DHCP_SNP_RETURN_CODE_VLAN_NOTEXIST	(DHCP_SNOOPING_RETURN_CODE_BASE + 0xF)				/* vlan not exist					*/
#define DHCP_SNP_RETURN_CODE_EN_VLAN			(DHCP_SNOOPING_RETURN_CODE_BASE + 0x10)				/* DHCP-Snooping enabled vlan		*/
#define DHCP_SNP_RETURN_CODE_NOT_EN_VLAN	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x11)				/* DHCP-Snooping not enabled vlan	*/
#define DHCP_SNP_RETURN_CODE_PORT_TRUNK_MBR	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x12)				/* the port is member of trunk		*/
#define DHCP_SNP_RETURN_CODE_VLAN_PORT_NO_EXIST (DHCP_SNOOPING_RETURN_CODE_BASE + 0x13)			/* the port is not member of the vlan	*/

#define DHCP_SNP_RETURN_CODE_HASENABLE_PORT 	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x14)	/* port has enable DHCP_Snooping  */	
#define DHCP_SNP_RETURN_CODE_NOTENABLE_PORT	 	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x15)	/*port not enable DHCP_Snooping*/
#define DHCP_SNP_RETURN_CODE_VLAN_NOT_EXIST		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x16)		/* L2 vlan not exixt   */
#define DHCP_SNP_RETURN_CODE_NOT_SUPPORT_DHCP_SNP		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x17)   /* vlan not support DHCP_Snooping*/
#define DHCP_SNP_RETURN_CODE_PORT_NOT_EXIST 	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x18)	/* port not exixt   */
#define DHCP_SNP_RETURN_CODE_ERROR_HW		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x19) 	/* set hardware error */
#define DHCP_SNP_RETURN_CODE_BIND_DYNAMIC       (DHCP_SNOOPING_RETURN_CODE_BASE + 0x20)    
#define DHCP_SNP_RETURN_CODE_BIND_STATIC        (DHCP_SNOOPING_RETURN_CODE_BASE + 0x21)    
#define DHCP_SNP_RETURN_CODE_PORT_NOT_EN_IN_VLAN (DHCP_SNOOPING_RETURN_CODE_BASE + 0x22)

#define DHCP_SNP_RETURN_CODE_IP_DHCP_RELAY_INFO_EN_OPT82		(DHCP_SNOOPING_RETURN_CODE_BASE + 0x23)				/* ip dhcp relay information enabled option82	*/
#define DHCP_SNP_RETURN_CODE_IP_DHCP_RELAY_INFO_NOT_EN_OPT82	(DHCP_SNOOPING_RETURN_CODE_BASE + 0x24)
#define DHCP_SNP_RETURN_CODE_IP_DHCP_RELAY_INFO_ALREADY_SET	    (DHCP_SNOOPING_RETURN_CODE_BASE + 0x25)				/* already been seted				*/
#define DHCP_SNP_RETURN_CODE_OPTION82_ATTRIBUTE_ALREADY_SET     (DHCP_SNOOPING_RETURN_CODE_BASE + 0x26)
#define DHCP_SNP_RETURN_CODE_OPTION82_SNP_ALREADY_SET	        (DHCP_SNOOPING_RETURN_CODE_BASE + 0x27)
#define DHCP_SNP_RETURN_CODE_MAC_ILEGAL                         (DHCP_SNOOPING_RETURN_CODE_BASE + 0x28)

/* DHCP SERVER branch */
#define DHCP_SERVER_RETURN_CODE_BASE			       (0x170000)
#define DHCP_SERVER_RETURN_CODE_SUCCESS			       (COMMON_SUCCESS)
#define DHCP_SERVER_RETURN_CODE_ERROR			       (DHCP_SERVER_RETURN_CODE_BASE + 0x1)
#define DHCP_SERVER_RETURN_CODE_NOTENABLE              (DHCP_SERVER_RETURN_CODE_BASE + 0x2)
#define DHCP_SERVER_RETURN_CODE_ENABLE                 (DHCP_SERVER_RETURN_CODE_BASE + 0x3)
#define DHCP_SERVER_RETURN_CODE_BE_SETED               (DHCP_SERVER_RETURN_CODE_BASE + 0x4)


#define DHCP_SERVER_RETURN_CODE_INTF_NOTEXIST          (DHCP_SERVER_RETURN_CODE_BASE + 0x10)
#define DHCP_SERVER_RETURN_CODE_INTF_ENABLED           (DHCP_SERVER_RETURN_CODE_BASE + 0x11)
#define DHCP_SERVER_RETURN_CODE_INTF_NOTENABLED        (DHCP_SERVER_RETURN_CODE_BASE + 0x12)
#define DHCP_SERVER_RETURN_CODE_INTF_ERROR             (DHCP_SERVER_RETURN_CODE_BASE + 0x13)
#define DHCP_SERVER_RETURN_CODE_INTF_IP_INVALID        (DHCP_SERVER_RETURN_CODE_BASE + 0x14)
#define DHCP_SERVER_RETURN_CODE_INTF_IDX_INVALID       (DHCP_SERVER_RETURN_CODE_BASE + 0x15)
#define DHCP_SERVER_RETURN_CODE_INTF_POOL_NOTMATCH     (DHCP_SERVER_RETURN_CODE_BASE + 0x16)

#define DHCP_SERVER_RETURN_CODE_POOL_NOTEXIST          (DHCP_SERVER_RETURN_CODE_BASE + 0x20)
#define DHCP_SERVER_RETURN_CODE_POOL_EXIST             (DHCP_SERVER_RETURN_CODE_BASE + 0x21)
#define DHCP_SERVER_RETURN_CODE_POOL_BINDED            (DHCP_SERVER_RETURN_CODE_BASE + 0x22)
#define DHCP_SERVER_RETURN_CODE_POOL_NOTBINDED         (DHCP_SERVER_RETURN_CODE_BASE + 0x23)
#define DHCP_SERVER_RETURN_CODE_POOL_IPMASK_MISMATCH   (DHCP_SERVER_RETURN_CODE_BASE + 0x24)
#define DHCP_SERVER_RETURN_CODE_POOL_IP_CONFLICT       (DHCP_SERVER_RETURN_CODE_BASE + 0x25)
#define DHCP_SERVER_RETURN_CODE_POOL_IP_INVALID        (DHCP_SERVER_RETURN_CODE_BASE + 0x26)
#define DHCP_SERVER_RETURN_CODE_POOL_NAME_INVALID      (DHCP_SERVER_RETURN_CODE_BASE + 0x27)
#define DHCP_SERVER_RETURN_CODE_POOL_RANGE_ALREADY_SET (DHCP_SERVER_RETURN_CODE_BASE + 0x28)
#define DHCP_SERVER_RETURN_CODE_POOL_REACH_MAX         (DHCP_SERVER_RETURN_CODE_BASE + 0x29)
#define DHCP_SERVER_RETURN_CODE_POOL_LEASE_OVER_MAX    (DHCP_SERVER_RETURN_CODE_BASE + 0x2A)
#define DHCP_SERVER_RETURN_CODE_POOL_FORBIDDEN_OVER_MAX    (DHCP_SERVER_RETURN_CODE_BASE + 0x2B)
#define DHCP_SERVER_RETURN_CODE_POOL_FORBIDDEN_CONFLICT    (DHCP_SERVER_RETURN_CODE_BASE + 0x2C)
#define DHCP_SERVER_RETURN_CODE_POOL_FORBIDDEN_OUT_RANGE   (DHCP_SERVER_RETURN_CODE_BASE + 0x2D)
#define DHCP_SERVER_RETURN_CODE_POOL_FORBIDDEN_SCOPE_CONFLICT   (DHCP_SERVER_RETURN_CODE_BASE + 0x2E)
#define DHCP_SERVER_RETURN_CODE_POOL_FORBIDDEN_NOT_EXIST   (DHCP_SERVER_RETURN_CODE_BASE + 0x2F)
#define DHCP_SERVER_RETURN_CODE_POOL_OPTION4360_NOT_EXIST  (DHCP_SERVER_RETURN_CODE_BASE + 0x30)
#define DHCP_SERVER_RETURN_CODE_POOL_OPTION4360_EXIST  (DHCP_SERVER_RETURN_CODE_BASE + 0x31)
#define DHCP_SERVER_RETURN_CODE_POOL_OPTION4360_OVER_MAX   (DHCP_SERVER_RETURN_CODE_BASE + 0x32)

#define DHCP_SERVER_RETURN_CODE_HOST_NOTEXIST          (DHCP_SERVER_RETURN_CODE_BASE + 0x40)
#define DHCP_SERVER_RETURN_CODE_HOST_EXIST             (DHCP_SERVER_RETURN_CODE_BASE + 0x41)
#define DHCP_SERVER_RETURN_CODE_LEASE_TIME_MISMATCHING (DHCP_SERVER_RETURN_CODE_BASE + 0x42)
#define DHCP_SERVER_RETURN_CODE_LESS_THEN_MIN_LEASE_TIME (DHCP_SERVER_RETURN_CODE_BASE + 0x43)

/* DHCP client branch */
#define DHCP_CLIENT_RETURN_CODE_BASE			       (0x171000)
#define DHCP_CLIENT_RETURN_CODE_SUCCESS			       (COMMON_SUCCESS)
#define DHCP_CLIENT_RETURN_CODE_ERROR			       (DHCP_CLIENT_RETURN_CODE_BASE + 0x1)
#define DHCP_CLIENT_RETURN_CODE_DEFAULT_ROUTE_SET      (DHCP_CLIENT_RETURN_CODE_BASE + 0x2)
#define DHCP_CLIENT_RETURN_CODE_DEFAULT_ROUTE_NOT_SET  (DHCP_CLIENT_RETURN_CODE_BASE + 0x3)
#define DHCP_CLIENT_RETURN_CODE_NOT_EXIST			   (DHCP_CLIENT_RETURN_CODE_BASE + 0x4)
#define DHCP_CLIENT_RETURN_CODE_OPTION_NOT_EXIST	   (DHCP_CLIENT_RETURN_CODE_BASE + 0x5)
#define DHCP_CLIENT_RETURN_CODE_OPTION_IS_SET   	   (DHCP_CLIENT_RETURN_CODE_BASE + 0x6)
#define DHCP_CLIENT_RETURN_CODE_OPTION_NOT_SET	       (DHCP_CLIENT_RETURN_CODE_BASE + 0x7)
#define DHCP_CLIENT_RETURN_CODE_DHCP_ADDRESS_ENABLE	   (DHCP_CLIENT_RETURN_CODE_BASE + 0x8)
#define DHCP_CLIENT_RETURN_CODE_DHCP_ADDRESS_NOT_ENABLE	   (DHCP_CLIENT_RETURN_CODE_BASE + 0x9)
#define DHCP_CLIENT_RETURN_CODE_DHCP_ADDRESS_NOT_FOUND	   (DHCP_CLIENT_RETURN_CODE_BASE + 0x0a)

/* DHCPv6 server branch */
#define DHCPV6_SERVER_RETURN_CODE_BASE                  (0x172000)
#define DHCPV6_SERVER_RETURN_CODE_SUCCESS               (COMMON_SUCCESS)
#define DHCPV6_SERVER_RETURN_CODE_ERROR                 (DHCPV6_SERVER_RETURN_CODE_BASE + 0x1)
#define DHCPV6_SERVER_RETURN_CODE_SERIVCE_ENABLE        (DHCPV6_SERVER_RETURN_CODE_BASE + 0x2)
#define DHCPV6_SERVER_RETURN_CODE_HOST_NOT_EXIST        (DHCPV6_SERVER_RETURN_CODE_BASE + 0x3)
#define DHCPV6_SERVER_RETURN_CODE_HOST_CONFLICT         (DHCPV6_SERVER_RETURN_CODE_BASE + 0x4)
#define DHCPV6_SERVER_RETURN_CODE_POOL_NOT_EXIST             (DHCPV6_SERVER_RETURN_CODE_BASE + 0x5)



/* ASD branch */
#define	ASD_RETURN_CODE_BASE    			(0x180000)						/* return code base  */  
#define	ASD_RETURN_CODE_SUCCESS				(COMMON_RETURN_CODE_BASE)	    /* success   */   
#define	ASD_RETURN_CODE_ERROR				(ASD_RETURN_CODE_BASE + 0x1)	/* error     */ 
#define ASD_RETURN_CODE_NULL_PTR            (ASD_RETURN_CODE_BASE + 0x2)    /* NULL pointer */
#define ASD_RETURN_CODE_CHG_VLAN_FAIL		(ASD_RETURN_CODE_BASE + 0x3)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_DIS_AUTO_LRN_FAIL	(ASD_RETURN_CODE_BASE + 0x4)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_SET_AUTH_MOD_FAIL	(ASD_RETURN_CODE_BASE + 0x5)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_SET_AUTH_STAT_FAIL	(ASD_RETURN_CODE_BASE + 0x6)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_ADD_STATIC_FDB_FAIL	(ASD_RETURN_CODE_BASE + 0x7)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_DEL_STATIC_FDB_FAIL	(ASD_RETURN_CODE_BASE + 0x8)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_DEL_DYNAM_FDB_FAIL	(ASD_RETURN_CODE_BASE + 0x9)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_GET_PVID_FAIL	(ASD_RETURN_CODE_BASE + 0x10)	/*Fail to change port to specified vlan*/
#define ASD_RETURN_CODE_PORT_MEMBERSHIP_ERR	(ASD_RETURN_CODE_BASE + 0x11)	/*Fail to change port to specified vlan*/

/* BOARD branch */
#define BOARD_RETURN_CODE_BASE				(0x190000)							/* return code base  */ 
#define	BOARD_RETURN_CODE_ERR_NONE			(COMMON_SUCCESS)			/* success  */ 
#define BOARD_RETURN_CODE_ERR_GENERAL     	(BOARD_RETURN_CODE_BASE + 0x1)   	/* general failure */
#define BOARD_RETURN_CODE_NO_SUCH_SLOT    	(BOARD_RETURN_CODE_BASE + 0x2) 
#define BOARD_RETURN_CODE_NO_SUCH_TYPE    	(BOARD_RETURN_CODE_BASE + 0x3)   
#define BOARD_RETURN_CODE_CONFIG_ERROR    	(BOARD_RETURN_CODE_BASE + 0x4)   
#define BOARD_RETURN_CODE_WRONG_SLOTNO      (BOARD_RETURN_CODE_BASE + 0x5)
#define BOARD_RETURN_CODE_WRONG_STATE       (BOARD_RETURN_CODE_BASE + 0x6)
#define BOARD_RETURN_CODE_NOT_ACTMASTER     (BOARD_RETURN_CODE_BASE + 0x7)
#define BOARD_RETURN_CODE_MASTER            (BOARD_RETURN_CODE_BASE + 0x8)
#define BOARD_RETURN_CODE_CONF_EXIST        (BOARD_RETURN_CODE_BASE + 0x9)
#define BOARD_RETURN_CODE_NOTSERVICE        (BOARD_RETURN_CODE_BASE + 0xa)
#define BOARD_RETURN_CODE_NO_SUCH_CONF      (BOARD_RETURN_CODE_BASE + 0xb)
#define BOARD_RETURN_CODE_NO_SUCH_VLAN      (BOARD_RETURN_CODE_BASE + 0xc)
#define BOARD_RETURN_CODE_NOT_ON_SERVICE    (BOARD_RETURN_CODE_BASE + 0xd)
#define BOARD_RETURN_CODE_BACK_ITSELF	    (BOARD_RETURN_CODE_BASE + 0xe)
#define BOARD_RETURN_CODE_SERVICE_ERR	    (BOARD_RETURN_CODE_BASE + 0xf)
#define BOARD_RETURN_CODE_NO_SUPPORT        (BOARD_RETURN_CODE_BASE + 0x10)



/*DHCP Relay brance*/
#define DHCP_RELAY_RETURN_CODE_BASE              (0x1A0000)
#define DHCP_RELAY_RETURN_CODE_SUCCESS           (COMMON_SUCCESS)
#define DHCP_RELAY_RETURN_CODE_GENERAL_ERROR     (DHCP_RELAY_RETURN_CODE_BASE + 0x1)
#define DHCP_RELAY_RETURN_CODE_GLOBAL_ENABLE     (DHCP_RELAY_RETURN_CODE_BASE + 0x2)
#define DHCP_RELAY_RETURN_CODE_NOT_GLOBAL_ENABLE (DHCP_RELAY_RETURN_CODE_BASE + 0x3)
#define DHCP_RELAY_RETURN_CODE_HELPER_ADDRESS_EXIST (DHCP_RELAY_RETURN_CODE_BASE + 0x4)
#define DHCP_RELAY_RETURN_CODE_SERVER_NOT_EXIST  (DHCP_RELAY_RETURN_CODE_BASE + 0x5)
#define DHCP_RELAY_RETURN_CODE_SERVER_FULL       (DHCP_RELAY_RETURN_CODE_BASE + 0x6)
#define DHCP_RELAY_RETURN_CODE_VLAN_NOTEXIST     (DHCP_RELAY_RETURN_CODE_BASE + 0x7)
#define DHCP_RELAY_RETURN_CODE_DHCP_RELAY_SET	 (DHCP_RELAY_RETURN_CODE_BASE + 0x8)
#define DHCP_RELAY_RETURN_CODE_DHCP_SVR_SET	     (DHCP_RELAY_RETURN_CODE_BASE + 0x9)
#define DHCP_RELAY_RETURN_CODE_VLAN_ENABLE       (DHCP_RELAY_RETURN_CODE_BASE + 0xA)
#define DHCP_RELAY_RETURN_CODE_NOT_VLAN_ENABLE   (DHCP_RELAY_RETURN_CODE_BASE + 0xB)
#define DHCP_RELAY_RETURN_CODE_PORT_NOT_EXIST    (DHCP_RELAY_RETURN_CODE_BASE + 0xC)
#define DHCP_RELAY_RETURN_CODE_PORT_ENABLE       (DHCP_RELAY_RETURN_CODE_BASE + 0xD) 
#define DHCP_RELAY_RETURN_CODE_PORT_NOT_ENABLE   (DHCP_RELAY_RETURN_CODE_BASE + 0xE)
#define DHCP_RELAY_RETURN_CODE_PORT_TRUNK_MBR    (DHCP_RELAY_RETURN_CODE_BASE + 0xF)

#define DHCP_RELAY_RETURN_CODE_USER_NOT_EXIST    (DHCP_RELAY_RETURN_CODE_BASE + 0x10)
#define DHCP_RELAY_RETURN_CODE_USER_EXIST        (DHCP_RELAY_RETURN_CODE_BASE + 0x11)
#define DHCP_RELAY_RETURN_CODE_PKT_DROP		     (DHCP_RELAY_RETURN_CODE_BASE + 0x12)				/* DHCP packet is not legal, drop it	*/
#define DHCP_RELAY_RETURN_CODE_ALREADY_SET		 (DHCP_RELAY_RETURN_CODE_BASE + 0x13)				/* DHCP packet is not legal, drop it	*/
#define DHCP_RELAY_RETURN_CODE_SERVER_SET		 (DHCP_RELAY_RETURN_CODE_BASE + 0x14)				/* DHCP packet is not legal, drop it	*/

/*DHCPv6 Relay brance*/
#define DHCPV6_RELAY_RETURN_CODE_BASE                 (0x1A1000)
#define DHCPV6_RELAY_RETURN_CODE_SUCCESS              (COMMON_SUCCESS)
#define DHCPV6_RELAY_RETURN_CODE_ERROR                (DHCPV6_RELAY_RETURN_CODE_BASE + 0x1)
#define DHCPV6_RELAY_RETURN_CODE_ALREADY_SET	      (DHCPV6_RELAY_RETURN_CODE_BASE + 0x2)
#define DHCPV6_RELAY_RETURN_CODE_SERVICE_DISABLE      (DHCPV6_RELAY_RETURN_CODE_BASE + 0x3)
#define DHCPV6_RELAY_RETURN_CODE_INTFFACE_DISABLE     (DHCPV6_RELAY_RETURN_CODE_BASE + 0x4)
#define DHCPV6_RELAY_RETURN_CODE_ADDRESS_NOT_COMPARE  (DHCPV6_RELAY_RETURN_CODE_BASE + 0x5)
#define DHCPV6_RELAY_RETURN_CODE_L3_NOT_EXIST         (DHCPV6_RELAY_RETURN_CODE_BASE + 0x6)
#define DHCPV6_RELAY_RETURN_CODE_DROP                 (DHCPV6_RELAY_RETURN_CODE_BASE + 0x10)



/* DEVICE branch */
#define DEVICE_RETURN_CODE_BASE					(0x1B0000)							/* return code base  */ 
#define	DEVICE_RETURN_CODE_ERR_NONE				(COMMON_SUCCESS)					/* success  */ 
#define DEVICE_RETURN_CODE_ERR_GENERAL     		(DEVICE_RETURN_CODE_BASE + 0x1)   	/* general failure */
#define DEVICE_RETURN_CODE_NO_SUCH_POWER_UNIT  	(DEVICE_RETURN_CODE_BASE + 0x2) 
#define DEVICE_RETURN_CODE_NOT_LOCAL_SLOT  		(DEVICE_RETURN_CODE_BASE + 0x3) 
#define DEVICE_RETURN_CODE_SLOT_NO_READY  		(DEVICE_RETURN_CODE_BASE + 0x4) 
#define DEVICE_RETURN_CODE_SLOT_NOT_LOCAL  		(DEVICE_RETURN_CODE_BASE + 0x5) 
#define DEVICE_RETURN_CODE_NO_SUCH_FAN_UNIT  	(DEVICE_RETURN_CODE_BASE + 0x6) 
#define DEVICE_RETURN_CODE_FAN_NOT_PRESENT  	(DEVICE_RETURN_CODE_BASE + 0x7)
#define DEVICE_RETURN_CODE_TEMP_READ_ERROR 		(DEVICE_RETURN_CODE_BASE + 0x8)
#define DEVICE_RETURN_CODE_TEMP_WRITE_ERROR 	(DEVICE_RETURN_CODE_BASE + 0x9)


/*GVRP*/
#define GVRP_RETURN_CODE_BASE					(0x1C0000)							/* return code base  */ 
#define	GVRP_RETURN_CODE_ERR_NONE				(COMMON_SUCCESS)					/* success  */ 
#define GVRP_RETURN_CODE_ERR_GENERAL     		(GVRP_RETURN_CODE_BASE + 0x1)   	/* general failure */
#define GVRP_RETURN_CODE_ENABLE_FAILED  	    (GVRP_RETURN_CODE_BASE + 0x2) 
#define GVRP_RETURN_CODE_DISABLE_FAILED  		(GVRP_RETURN_CODE_BASE + 0x3) 
#define GVRP_RETURN_CODE_NETIF_ENABLED  		(GVRP_RETURN_CODE_BASE + 0x4) 
#define GVRP_RETURN_CODE_NETIF_DISABLED  		(GVRP_RETURN_CODE_BASE + 0x5)
#define GVRP_RETURN_CODE_MODE_UPDATE_FAILED  	(GVRP_RETURN_CODE_BASE + 0x6)
#define GVRP_RETURN_CODE_GLOBAL_ENABLED      	(GVRP_RETURN_CODE_BASE + 0x7)
#define GVRP_RETURN_CODE_GLOBAL_DISABLED      	(GVRP_RETURN_CODE_BASE + 0x8)
#define GVRP_RETURN_CODE_WRONG_TIMER_TYPE      	(GVRP_RETURN_CODE_BASE + 0x9)
#define GVRP_RETURN_CODE_WRONG_HOLD_VALUE      	(GVRP_RETURN_CODE_BASE + 0xA)
#define GVRP_RETURN_CODE_WRONG_JOIN_VALUE      	(GVRP_RETURN_CODE_BASE + 0xB)
#define GVRP_RETURN_CODE_WRONG_LEAVE_VALUE      (GVRP_RETURN_CODE_BASE + 0xC)
#define GVRP_RETURN_CODE_WRONG_LEAVEALL_VALUE   (GVRP_RETURN_CODE_BASE + 0xD)
						/* return code base  */ 
#define	NDISC_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)					/* success  */ 

/*POE*/
#define POE_RETURN_CODE_BASE					(0x1D0000)							/* return code base  */ 
#define	POE_RETURN_CODE_ERR_NONE				(COMMON_SUCCESS)					/* success  */ 
#define POE_RETURN_CODE_ERR_GENERAL     		(POE_RETURN_CODE_BASE + 0x1)   	/* general failure */
#define POE_RETURN_CODE_GLOBAL_DISABLE 	    	(POE_RETURN_CODE_BASE + 0x2) 
#define POE_RETURN_CODE_PORT_DISABLE 	    	(POE_RETURN_CODE_BASE + 0x3) 
#define POE_RETURN_CODE_NO_SUCH_INTERFACE 	    (POE_RETURN_CODE_BASE + 0x4) 
#define POE_RETURN_CODE_NO_SUCH_PSE	    		(POE_RETURN_CODE_BASE + 0x5)
#define POE_RETURN_CODE_NO_SUCH_TIME_RANGE      (POE_RETURN_CODE_BASE + 0x6)
#define POE_RETURN_CODE_TIME_RANGE_USED         (POE_RETURN_CODE_BASE + 0x7)
#define POE_RETURN_CODE_ABS_TIME_EXIST          (POE_RETURN_CODE_BASE + 0x8)
#define POE_RETURN_CODE_PER_TIME_EXIST          (POE_RETURN_CODE_BASE + 0x9)
#define POE_RETURN_CODE_TIME_RANGE_INVILAID     (POE_RETURN_CODE_BASE + 0xA)
#define POE_RETURN_CODE_TIME_RANGE_BINDED       (POE_RETURN_CODE_BASE + 0xB)
/*MLD Snooping*/
#define MLDSNP_RETURN_CODE_BASE					(0x1E0000)		        			/* MLD base code */
#define MLDSNP_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)					/* MLD success return code*/ 
#define MLDSNP_RETURN_CODE_ERROR                (MLDSNP_RETURN_CODE_BASE + 0x1)
#define MLDSNP_RETURN_CODE_DISABLED             (MLDSNP_RETURN_CODE_BASE + 0x2)
#define MLDSNP_RETURN_CODE_ENABLED              (MLDSNP_RETURN_CODE_BASE + 0x3)
#define MLDSNP_RETURN_CODE_VLAN_DISABLED        (MLDSNP_RETURN_CODE_BASE + 0x4)
#define MLDSNP_RETURN_CODE_VLAN_ENABLED         (MLDSNP_RETURN_CODE_BASE + 0x5)
#define MLDSNP_RETURN_CODE_VLAN_NOTEXIST        (MLDSNP_RETURN_CODE_BASE + 0x6)
#define MLDSNP_RETURN_CODE_MRT_NOTEXIST         (MLDSNP_RETURN_CODE_BASE + 0x7)
#define MLDSNP_RETURN_CODE_MRT_EXIST            (MLDSNP_RETURN_CODE_BASE + 0x8)
#define MLDSNP_RETURN_CODE_END_OF_TABLE         (MLDSNP_RETURN_CODE_BASE + 0x9)
#define MLDSNP_RETURN_CODE_TIME_OUTRANGE        (MLDSNP_RETURN_CODE_BASE + 0xA)
#define MLDSNP_RETURN_CODE_PORT_NOTEXIST         (MLDSNP_RETURN_CODE_BASE + 0xB) 
#define MLDSNP_RETURN_CODE_PORT_EXIST            (MLDSNP_RETURN_CODE_BASE + 0xC)



/* NDISC branch 0x20000 -- 0x2FFFF*/		
#define NDISC_RETURN_CODE_BASE					(0x200000)		        			/* neighbour base code */
#define NDISC_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)					/* neighbour success return code*/ 
#define NDISC_RETURN_CODE_DUPLICATED			(NDISC_RETURN_CODE_BASE + 0x1)		/* duplicate neighbour found */
#define NDISC_RETURN_CODE_NOTEXISTS				(NDISC_RETURN_CODE_BASE + 0x2)		/* the neighbour item not found */
#define NDISC_RETURN_CODE_ACTION_TRAP2CPU		(NDISC_RETURN_CODE_BASE + 0x3)		/* trap to cpu */
#define NDISC_RETURN_CODE_NOTCONSISTENT			(NDISC_RETURN_CODE_BASE + 0x4)		/* not consistent */
#define NDISC_RETURN_CODE_TABLE_FULL			(NDISC_RETURN_CODE_BASE + 0x5)		/* neighbour table is full */
#define NDISC_RETURN_CODE_STATIC_EXIST			(NDISC_RETURN_CODE_BASE + 0x6)		/* static neighbour item exists */
#define NDISC_RETURN_CODE_STASTIC_NOTEXIST		(NDISC_RETURN_CODE_BASE + 0x7)		/* static neighbour item does not exist */
#define NDISC_RETURN_CODE_PORT_NOTMATCH			(NDISC_RETURN_CODE_BASE + 0x8)		/* the port is not match when delete static neighbour */
#define NDISC_RETURN_CODE_KERN_CREATE_FAILED	(NDISC_RETURN_CODE_BASE + 0x9)		/* static neighbour kernal create failed */
#define NDISC_RETURN_CODE_ACTION_HARD_DROP		(NDISC_RETURN_CODE_BASE + 0xA)		/* hard drop */
#define NDISC_RETURN_CODE_STATIC_NDISC_FULL		(NDISC_RETURN_CODE_BASE + 0xB)		/* the static neighbour is full : reach to 1024 */		
#define NDISC_RETURN_CODE_HASH_OP_FAILED		(NDISC_RETURN_CODE_BASE + 0xC)   	/* neighbour hash table operation failed */
#define NDISC_RETURN_CODE_NAM_ERROR				(NDISC_RETURN_CODE_BASE + 0xD)    	/* operation of nam error,maybe it's asic set failed*/
#define NDISC_RETURN_CODE_NULL_PTR				(NDISC_RETURN_CODE_BASE + 0xE)    	/* null point error */
#define NDISC_RETURN_CODE_NORESOURCE			(NDISC_RETURN_CODE_BASE + 0xF)    	/* no enough resource,eg. no enough memory*/
#define NDISC_RETURN_CODE_BADPARAM				(NDISC_RETURN_CODE_BASE + 0x10)   	/* bad parameter when function call*/
#define NDISC_RETURN_CODE_TBLINDEX_GET_FAILED	(NDISC_RETURN_CODE_BASE + 0x11)		/* index alloc failed */
#define NDISC_RETURN_CODE_INDEX_FREE_FAILED		(NDISC_RETURN_CODE_BASE + 0x12)		/* index free failed */
#define NDISC_RETURN_CODE_TRUNK_NOTMATCH		(NDISC_RETURN_CODE_BASE + 0x13)		/* the trunk id is not match when delete static neighbour */
#define NDISC_RETURN_CODE_CHECK_IP_ERROR		(NDISC_RETURN_CODE_BASE + 0x14)  	/* check ip error when create static neighbour */
#define NDISC_RETURN_CODE_NO_HAVE_ANY_IP		(NDISC_RETURN_CODE_BASE + 0x15)		/* no have any ip when set static neighbour  */
#define NDISC_RETURN_CODE_HAVE_THE_IP			(NDISC_RETURN_CODE_BASE + 0x16)		/* have the same ip with which we want to set, when set static neighbour */
#define NDISC_RETURN_CODE_NOT_SAME_SUB_NET		(NDISC_RETURN_CODE_BASE + 0x17)		/* the ip we want to set is not in the same sub net with the intf,when set static neighbour */
#define NDISC_RETURN_CODE_INTERFACE_NOTEXIST	(NDISC_RETURN_CODE_BASE + 0x18)		/* interface not exists when neighbour operation */
#define NDISC_RETURN_CODE_PORT_NOT_IN_VLAN		(NDISC_RETURN_CODE_BASE + 0x19)  	 /* the port is not in the vlan when static neighbour operation */
#define NDISC_RETURN_CODE_MAC_MATCHED_BASE_MAC	(NDISC_RETURN_CODE_BASE + 0x1A)		/* config mac matched system mac */
#define NDISC_RETURN_CODE_MAC_MATCHED_INTERFACE_MAC	(NDISC_RETURN_CODE_BASE + 0x1B)	/* config mac matched interface's mac */
#define NDISC_RETURN_CODE_FD_ERROR				(NDISC_RETURN_CODE_BASE + 0x1C)		/* fd invalidate */
#define NDISC_RETURN_CODE_NO_SUCH_PORT			(NDISC_RETURN_CODE_BASE + 0x1D)		/* no such port */
#define NDISC_RETURN_CODE_VLAN_NOTEXISTS		(NDISC_RETURN_CODE_BASE + 0x1E)		/* vlan not exists */
#define NDISC_RETURN_CODE_UNSUPPORTED_COMMAND	(NDISC_RETURN_CODE_BASE + 0x1F)		/* unsupported command */
#define NDISC_RETURN_CODE_TRUNK_NOT_EXISTS		(NDISC_RETURN_CODE_BASE + 0x20)		/* trunk not exists when add or del neighbour */
#define NDISC_RETURN_CODE_TRUNK_NOT_IN_VLAN		(NDISC_RETURN_CODE_BASE + 0x21)		/* trunk not in the vlan when static neighbour operation */
#define NDISC_RETURN_CODE_ALREADY_SET         	(NDISC_RETURN_CODE_BASE + 0x22)  
#define NDISC_RETURN_CODE_INVALID_PACKET_TYPE   (NDISC_RETURN_CODE_BASE + 0x23)  
#define NDISC_RETURN_CODE_CONFLICTED_IP       	(NDISC_RETURN_CODE_BASE + 0x24)   	/* have the same ip with l3 interface*/
#define NDISC_RETURN_CODE_NO_HAVE_THE_IP		(NDISC_RETURN_CODE_BASE + 0x25)		/* not have the same ip ,but in the same sub net,That's ok */
#define NDISC_RETURN_CODE_PACKET_DROP			(NDISC_RETURN_CODE_BASE + 0x26)		/* drop the packet */
#define NDISC_RETURN_CODE_STATIC_NEIGHBOUR_FULL (NDISC_RETURN_CODE_BASE + 0x27)		/* Reach the max num of neighbour */
#define NDISC_RETURN_CODE_ERR_GENERAL      		(NDISC_RETURN_CODE_BASE + 0x30)		/* neighbour inspection has not been globally enabled */
#define NDISC_RETURN_CODE_ERROR					(NDISC_RETURN_CODE_BASE + 0xFFFF)	/* error occured ,maybe unknow error*/
#define NDISC_RETURN_CODE_MAX					(NDISC_RETURN_CODE_BASE + 0xFFFF)	/* the max return code of neighbour module */


#define	CAPWAP_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)					/* success  */ 


/* CAPWAP branch 0x21000 -- 0x2FFFF*/		
#define CAPWAP_RETURN_CODE_BASE					(0x210000)		        			/* capwap base code */
#define CAPWAP_RETURN_CODE_ERROR				(CAPWAP_RETURN_CODE_BASE+0x1)		/* capwap base code */
#define CAPWAP_RETURN_CODE_GET_NETIF_ERR		(CAPWAP_RETURN_CODE_BASE+0x2)		/* capwap base code */
#define CAPWAP_RETURN_CODE_GET_IP_ADDR_ERR		(CAPWAP_RETURN_CODE_BASE+0x3)		/* capwap base code */
#define CAPWAP_RETURN_CODE_INTETFACE_ERR		(CAPWAP_RETURN_CODE_BASE+0x4)		/* capwap base code */
#define CAPWAP_RETURN_CODE_ADD_TUNNEL_ERR		(CAPWAP_RETURN_CODE_BASE+0x5)		/* capwap base code */
#define CAPWAP_RETURN_CODE_DEL_TUNNEL_ERR		(CAPWAP_RETURN_CODE_BASE+0x6)		/* capwap base code */
#define CAPWAP_RETURN_CODE_MOD_TUNNEL_ERR		(CAPWAP_RETURN_CODE_BASE+0x7)		/* capwap base code */
#define CAPWAP_RETURN_CODE_ADD_BSSID_ERR		(CAPWAP_RETURN_CODE_BASE+0x8)		/* capwap base code */
#define CAPWAP_RETURN_CODE_DEL_BSSID_ERR		(CAPWAP_RETURN_CODE_BASE+0x9)		/* capwap base code */
#define CAPWAP_RETURN_CODE_MOD_BSSID_ERR		(CAPWAP_RETURN_CODE_BASE+0x10)		/* capwap base code */
#define CAPWAP_RETURN_CODE_SET_SIP_ADDR_ERR		(CAPWAP_RETURN_CODE_BASE+0x11)		/* capwap base code */
#define CAPWAP_RETURN_CODE_SET_SMAC_ADDR_ERR	(CAPWAP_RETURN_CODE_BASE+0x12)		/* capwap base code */
#define CAPWAP_RETURN_CODE_SET_DMAC_ADDR_ERR	(CAPWAP_RETURN_CODE_BASE+0x13)		/* capwap base code */
#define CAPWAP_RETURN_CODE_ENTRY_NOT_EXIST		(CAPWAP_RETURN_CODE_BASE+0x14)		/* capwap base code */
#define CAPWAP_RETURN_CODE_ENTRY_ALREADY_EXIST	(CAPWAP_RETURN_CODE_BASE+0x15)		/* capwap base code */



/* ERPP branch 0x220000 -- 0x22FFFF*/		
#define ERPP_RETURN_CODE_BASE					(0x220000)	
#define	ERPP_RETURN_CODE_SUCCESS				(COMMON_SUCCESS)					/* success  */ 
#define ERPP_RETURN_CODE_ERROR				(ERPP_RETURN_CODE_BASE+0x1)		/*  */
#define ERPP_RETURN_CODE_DOMAIN_EXIST		(ERPP_RETURN_CODE_BASE+0x2)		/* */
#define ERPP_RETURN_CODE_DOMAIN_NOEXIST		(ERPP_RETURN_CODE_BASE+0x3)		/* */
#define ERPP_RETURN_CODE_INTETFACE_ERR		(ERPP_RETURN_CODE_BASE+0x4)		/* */
#define ERPP_RETURN_CODE_NOT_ENABLE		    (ERPP_RETURN_CODE_BASE+0x5)		/* */
#define ERPP_RETURN_CODE_LOG_LEVEL_SET_ERR	(ERPP_RETURN_CODE_BASE+0x6)		/* */
#define ERPP_RETURN_CODE_ALLOC_MEM_NULL		(ERPP_RETURN_CODE_BASE+0x7)		/* */
#define ERPP_RETURN_CODE_NETIF_NOT_FOUND    (ERPP_RETURN_CODE_BASE+0x8)
#define ERPP_RETURN_CODE_RING_CONFLICT      (ERPP_RETURN_CODE_BASE+0x9)
#define ERPP_RETURN_CODE_RING_NOEXIST       (ERPP_RETURN_CODE_BASE+0xA)
#define ERPP_RETURN_CODE_TIMER_SET_ERR      (ERPP_RETURN_CODE_BASE+0xB)


/*SFLOW*/
#define SFLOW_RETURN_CODE_BASE					(0x230000)	
#define	SFLOW_RETURN_CODE_ERR_NONE				(COMMON_SUCCESS)					/* sflow base code */
#define SFLOW_RETURN_CODE_ERR_GENERAL 			(SFLOW_RETURN_CODE_BASE + 0x1)		/* sflow base code */
#define SFLOW_RETURN_CODE_PORT_DISABLE	    	(SFLOW_RETURN_CODE_BASE + 0x2)		/* sflow base code */
#define SFLOW_RETURN_CODE_NO_SUCH_INTERFACE 	(SFLOW_RETURN_CODE_BASE + 0x3) 
#define SFLOW_RETURN_CODE_IS_DISABLE 			(SFLOW_RETURN_CODE_BASE + 0x4) 
#define SFLOW_RETURN_CODE_INSERT_FAIL 			(SFLOW_RETURN_CODE_BASE + 0x5) 
#define SFLOW_RETURN_CODE_UPDATE_FAIL 			(SFLOW_RETURN_CODE_BASE + 0x6)
#define SFLOW_RETURN_CODE_DELEATE_FAIL 			(SFLOW_RETURN_CODE_BASE + 0x7) 
#define SFLOW_RETURN_CODE_NO_CONFIG_IP 			(SFLOW_RETURN_CODE_BASE + 0x8) 
#define SFLOW_RETURN_CODE_DEV_INDEX				(SFLOW_RETURN_CODE_BASE + 0x9) 

/*PIMD*/
#define PIMD_RETURN_CODE_BASE                   (0x240000)
#define PIMD_RETURN_CODE_SUCCESS                (COMMON_SUCCESS)
#define PIMD_RETURN_CODE_ERROR                  (PIMD_RETURN_CODE_BASE + 0x1)
#define PIMD_RETURN_CODE_MROUTE_STOP            (PIMD_RETURN_CODE_BASE + 0x2)
#define PIMD_RETURN_CODE_MROUTE_RUN             (PIMD_RETURN_CODE_BASE + 0x3)
#define PIMD_RETURN_CODE_MROUTE_MODESM          (PIMD_RETURN_CODE_BASE + 0x4) 
#define PIMD_RETURN_CODE_MROUTE_MODEDM          (PIMD_RETURN_CODE_BASE + 0x5) 
#define PIMD_RETURN_CODE_INTF_DIS               (PIMD_RETURN_CODE_BASE + 0x10)
#define PIMD_RETURN_CODE_INTF_EN                (PIMD_RETURN_CODE_BASE + 0x11) 
#define PIMD_RETURN_CODE_INTF_NOTEXIST          (PIMD_RETURN_CODE_BASE + 0x12) 
#define PIMD_RETURN_CODE_CBSR_EXIST             (PIMD_RETURN_CODE_BASE + 0x20) 
#define PIMD_RETURN_CODE_CBSR_NOTEXIST          (PIMD_RETURN_CODE_BASE + 0x21) 
#define PIMD_RETURN_CODE_CRP_EXIST              (PIMD_RETURN_CODE_BASE + 0x30) 
#define PIMD_RETURN_CODE_CRP_NOTEXIST           (PIMD_RETURN_CODE_BASE + 0x31) 
#define PIMD_RETURN_CODE_CRP_INV_ADDR           (PIMD_RETURN_CODE_BASE + 0x32)   
#define PIMD_RETURN_CODE_CRP_INV_PRI            (PIMD_RETURN_CODE_BASE + 0x33)   
#define PIMD_RETURN_CODE_CRP_INV_HLDT           (PIMD_RETURN_CODE_BASE + 0x34)   




/* To be continue */
#define MAC_RETURN_CODE							(0xFFFFFFFF)

#endif
